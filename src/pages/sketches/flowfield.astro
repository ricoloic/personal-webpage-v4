---
import Layout from "../../layouts/Layout.astro";
import EditDropdown from "../../components/EditDropdown.astro";
import Checkbox from "../../components/inputs/Checkbox.astro";
import Range from "../../components/inputs/Range.astro";
---

<Layout title="Flowfield">
    <EditDropdown slot="edit">
        <ul slot="options" class="text-sm text-gray-700">
            <li class="flex items-center border-b-2 px-4 py-2">
                <Checkbox id="log-framerate-checkbox" title="Log Framerate" />
            </li>
            <li class="flex items-center border-b-2 px-4 py-2">
                <Checkbox id="show-flow-checkbox" title="Show Flow" />
            </li>
            <li class="border-b-2 px-4 py-2">
                <Range
                    id="particle-amount-range"
                    title="Particle Amount"
                    min={100}
                    max={5000}
                    step={100}
                />
            </li>
            <li class="px-4 py-2">
                <Range
                    id="scale-range"
                    title="Scale"
                    min={4}
                    max={50}
                    step={2}
                />
            </li>
        </ul>
    </EditDropdown>

    <main
        id="canvas-wrapper"
        class="overflow-y-auto relative flex-1 overflow-hidden h-full"
    >
        <span
            id="framerate"
            class="z-10 select-none px-1 text-white absolute top-3 left-3 bg-black"
        ></span>
        <canvas
            id="flowfield-canvas"
            class="block absolute top-0 right-0 bottom-0 left-0"></canvas>
    </main>

    <!-- SECTION: STATIC_IMPORTS -->
    <script is:inline src="/js/utils/html.js"></script>
    <script is:inline src="/js/externals/noise.js"></script>
    <script is:inline src="/js/classes/vector.js"></script>
    <script is:inline src="/js/utils/mouse.js"></script>
    <script is:inline src="/js/utils/core.js"></script>
    <script is:inline src="/js/utils/color.js"></script>
    <script is:inline src="/js/utils/draw.js"></script>
    <!-- ENDSECTION: STATIC_IMPORTS -->

    <!-- SECTION: CONFIG -->
    <script is:inline>
        const config = {
            logFramerate: true,
            particleAmount: 2_000,
            scale: 10,
            increment: 0.1,
            lod: 3,
            fallOff: 0.6,
            showFlow: true,
        };

        const eLogFramerateCheckbox = document.getElementById(
            "log-framerate-checkbox"
        );
        const eFramerate = document.getElementById("framerate");
        const eShowFlowCheckbox = document.getElementById("show-flow-checkbox");
        const eParticleAmountRange = document.getElementById(
            "particle-amount-range"
        );
        const eParticleAmountLabel = document.querySelector(
            'label[for="particle-amount-range"]>span'
        );
        const eScaleRange = document.getElementById("scale-range");
        const eScaleLabel = document.querySelector(
            'label[for="scale-range"]>span'
        );

        if (config.logFramerate) toggleCheckbox(eLogFramerateCheckbox);
        eLogFramerateCheckbox.addEventListener("change", function () {
            config.logFramerate = !config.logFramerate;
            if (!config.logFramerate) eFramerate.textContent = "";
        });

        if (config.showFlow) toggleCheckbox(eShowFlowCheckbox);
        eShowFlowCheckbox.addEventListener("change", function () {
            config.showFlow = !config.showFlow;
            initialize();
        });

        eParticleAmountRange.setAttribute("value", config.particleAmount);
        eParticleAmountLabel.textContent = config.particleAmount;
        eParticleAmountRange.addEventListener("change", function (event) {
            eParticleAmountLabel.textContent = event.target.value;
            config.particleAmount = parseFloat(event.target.value);
        });

        eScaleRange.setAttribute("value", config.scale);
        eScaleLabel.textContent = config.scale;
        eScaleRange.addEventListener("change", function (event) {
            eScaleLabel.textContent = event.target.value;
            config.scale = parseFloat(event.target.value);
            initialize();
        });
    </script>
    <!-- ENDSECTION: CONFIG -->

    <!-- SECTION: PARTICLE_CLASS -->
    <script is:inline>
        class Particle {
            constructor(x, y) {
                this.position = Vector.create(x, y);
                this.velocity = Vector.create(random(-1, 1), random(-1, 1));
                this.acceleration = Vector.create();
                this.limitVelocity = 0.08;
            }

            reset(x, y) {
                this.position.set(x, y);
                return this;
            }

            update(ok = false) {
                this.velocity.add(this.acceleration).limit(this.limitVelocity);
                this.position.add(this.velocity);
                this.acceleration.mult(0);
                return this;
            }

            applyForce(force) {
                this.acceleration.add(force);
                return this;
            }

            wrap(minimum, maximum) {
                if (this.position.x > maximum.x) {
                    this.position.x = minimum.x;
                } else if (this.position.x < minimum.x) {
                    this.position.x = maximum.x;
                }

                if (this.position.y > maximum.y) {
                    this.position.y = minimum.y;
                } else if (this.position.y < minimum.y) {
                    this.position.y = maximum.y;
                }

                return this;
            }

            follow(columns, flowfield) {
                const flowIndex =
                    Math.floor(this.position.x) +
                    Math.floor(this.position.y) * columns;

                const force = flowfield[flowIndex].vector;
                return this.applyForce(force);
            }

            show(ctx, scale) {
                ctx.fillRect(
                    this.position.x * scale,
                    this.position.y * scale,
                    1,
                    1
                );
            }

            static create(...args) {
                return new Particle(...args);
            }
        }
    </script>
    <!-- ENDSECTION: PARTICLE_CLASS -->

    <!-- SECTION: FLOW_CLASS -->
    <script is:inline>
        class Flow {
            constructor() {
                this.vector = Vector.create();
            }

            update(xOff, yOff, zOff) {
                const angle = noise(xOff, yOff, zOff) * TWO_PI;
                this.vector.fromAngle(angle).mag(2);
                return this;
            }

            show(ctx, scale, x, y) {
                ctx.beginPath();
                ctx.moveTo(x, y);
                const v = this.vector.copy().mag(scale);
                ctx.lineTo(x + v.x, y + v.y);
                ctx.stroke();
            }

            static create() {
                return new Flow();
            }
        }
    </script>
    <!-- ENDSECTION: FLOW_CLASS -->

    <!-- SECTION: SKETCH -->
    <script is:inline>
        const eMain = document.getElementById("canvas-wrapper");
        const eCanvas = document.getElementById("flowfield-canvas");

        const maximumSize = Vector.create();
        const minimumSize = Vector.create();
        const ctx = eCanvas.getContext("2d");
        const flowfield = [];
        const particles = [];
        let columns,
            rows,
            displayScale,
            zOffset = 0;

        function initialize() {
            displayScale = config.scale * 1.5;
            eCanvas.width = eMain.offsetWidth;
            eCanvas.height = eMain.offsetHeight;
            columns = Math.ceil(eCanvas.width / config.scale);
            rows = Math.ceil(eCanvas.height / config.scale);
            maximumSize.set(columns, rows);
            background(ctx, "#333333");
            ctx.fillStyle = "hsla(26, 20%, 100%, 0.05)";
            ctx.lineWidth = 1;
            ctx.strokeStyle = "white";

            for (let i = 0; i < particles.length; i++) {
                particles[i].reset(random(columns), random(rows));
            }

            let iterations = 0;
            for (let y = 0; y <= rows + 1; y++) {
                for (let x = 0; x <= columns + 1; x++) {
                    if (!flowfield[iterations]) flowfield.push(Flow.create());
                    iterations++;
                }
            }
        }

        window.addEventListener("resize", initialize);

        initialize();

        noiseDetail(config.lod, config.fallOff);

        for (let y = 0; y <= rows + 1; y++) {
            for (let x = 0; x <= columns + 1; x++) {
                flowfield.push(Flow.create());
            }
        }

        for (let i = 0; i < config.particleAmount; i++) {
            const particle = Particle.create(random(columns), random(rows));
            particles.push(particle);
        }

        let framerate = 0;
        function draw() {
            framerate++;
            requestAnimationFrame(draw);

            if (config.showFlow) {
                background(ctx, "#333333");
            }

            let yOffset = 234423;
            for (let y = 0; y <= rows; y++) {
                let xOffset = 1000;
                for (let x = 0; x <= columns; x++) {
                    const realX = x * config.scale,
                        realY = y * config.scale;
                    const flow = flowfield[x + y * columns];

                    if (!flow) return;

                    flow.update(xOffset, yOffset, zOffset);

                    if (config.showFlow) {
                        flow.show(ctx, displayScale, realX, realY);
                    }

                    xOffset += config.increment;
                }
                yOffset += config.increment;
            }
            zOffset += 0.001;

            if (config.showFlow) return;

            for (let i = 0; i < config.particleAmount; i++) {
                if (!particles[i]) {
                    particles[i] = Particle.create(
                        random(columns),
                        random(rows)
                    );
                }

                particles[i]
                    .update(i == 0)
                    .wrap(minimumSize, maximumSize)
                    .follow(columns, flowfield)
                    .show(ctx, config.scale);
            }
        }

        setInterval(function () {
            if (config.logFramerate) eFramerate.textContent = `${framerate}fps`;
            framerate = 0;
        }, 1000);

        draw();
    </script>
    <!-- ENDSECTION: SKETCH -->
</Layout>
