---
import Layout from "../../layouts/Layout.astro";
import Fab from "../../components/Fab.astro";
import Controls from "../../components/Controls.astro";
import Checkbox from "../../components/inputs/Checkbox.astro";
import Range from "../../components/inputs/Range.astro";
import Canvas from "../../components/Canvas.astro";
import FabDropdown from "../../components/FabDropdown.astro";
import MenuIcon from "../../components/icons/MenuIcon.astro";
import COLOR_PALETTES from "../../constants/colors";
import Dropdown from "../../components/inputs/Dropdown.astro";

const paletteNames = Object.keys(COLOR_PALETTES);
const colorPaletteOptions = paletteNames.map((paletteName) => ({
    value: paletteName,
    label: paletteName,
}));
---

<Layout title="Flowfield">
    <Canvas id="flowfield-canvas">
        <Fab slot="edit">
            <FabDropdown id="edit">
                <MenuIcon slot="button" />
                <Controls slot="dropdown">
                    <Checkbox
                        id="log-framerate-checkbox"
                        title="Log Framerate"
                    />
                    <Checkbox id="show-flow-checkbox" title="Show Flow" />
                    <Checkbox
                        id="use-trails-checkbox"
                        title="Use Particles Trail"
                    />
                    <Range
                        id="particle-amount-range"
                        title="Particle Amount"
                        min={100}
                        max={5000}
                        step={100}
                    />
                    <Range
                        id="scale-range"
                        title="Scale"
                        min={4}
                        max={50}
                        step={2}
                    />
                    <Dropdown
                        id="color-palette-dropdown"
                        title="Color Palette"
                        options={colorPaletteOptions}
                    />
                </Controls>
            </FabDropdown>
        </Fab>
    </Canvas>

    <!-- SECTION: STATIC_IMPORTS -->
    <script is:inline src="/js/externals/noise.js"></script>
    <script is:inline src="/js/classes/vector.js"></script>
    <script is:inline src="/js/classes/quadtree.js"></script>
    <script is:inline src="/js/utils/core.js"></script>
    <script is:inline src="/js/utils/color.js"></script>
    <script is:inline src="/js/utils/draw.js"></script>
    <script is:inline src="/js/utils/url.js"></script>
    <!-- ENDSECTION: STATIC_IMPORTS -->

    <script is:inline define:vars={{ COLOR_PALETTES }}>
        const config = {
            logFramerate: true,
            useTrails: true,
            particleAmount: 1500,
            scale: 10,
            maxTrailLength: 40,
            increment: 0.04,
            lod: 3,
            fallOff: 0.25,
            colorPalette: "happy",
            showFlow: false,
        };
        prefillConfig(config);
        setParamConfig(config);

        const main = $("#canvas-wrapper");
        const canvas = $("#flowfield-canvas");
        const particles = [];
        const ctx = canvas.getContext("2d");
        const maximumSize = Vector.create();
        const minimumSize = Vector.create();
        const flowfield = [];
        let columns,
            rows,
            displayScale,
            zOffset = 0,
            boundary = new Rectangle(0, 0, 0, 0);
        let framerate = 0;
        let amountOfFlows = 0;

        const inputLogFramerate = $("#log-framerate-checkbox");
        const spanFramerate = $("#framerate");
        const inputShowFlow = $("#show-flow-checkbox");
        const inputUseTrails = $("#use-trails-checkbox");
        const inputParticleAmount = $("#particle-amount-range");
        const labelParticleAmount = $(
            'label[for="particle-amount-range"]>span'
        );
        const inputScale = $("#scale-range");
        const labelScale = $('label[for="scale-range"]>span');
        const inputColorPalette = $("#color-palette-dropdown");
        const optionsColorPalette = $("#color-palette-dropdown>option");

        class Particle {
            constructor(x, y, minAlfa = 0.1) {
                this.minAlfa = minAlfa;
                this.position = Vector.create(x, y);
                this.trail = [];
                this.trail[0] = this.position.copy();
                this.sideTrail = [];
                this.velocity = Vector.create();
                this.acceleration = Vector.create();
                this.limitVelocity = 0.1;
                this.updateColor(COLOR_PALETTES[config.colorPalette]);
                this.width = random(1, 5);
                this.maxTrailLength = random(1, config.maxTrailLength);
            }

            updateColor(colors) {
                const color = random(colors);
                this.color = color;
                this.rgbaString = `rgba(${color.rgba.r}, ${color.rgba.g}, ${
                    color.rgba.b
                }, ${random(0, this.minAlfa)})`;
            }

            reset() {
                this.position.set(random(columns), random(rows));
                return this;
            }

            update() {
                this.velocity.add(this.acceleration).limit(this.limitVelocity);
                this.position.add(this.velocity);
                if (config.useTrails) {
                    this.trail.push(this.position.copy());
                    if (this.trail.length > this.maxTrailLength) {
                        this.trail.splice(0, 1);
                    }
                }
                this.acceleration.mult(0);
                return this;
            }

            applyForce(force) {
                this.acceleration.add(force);
                return this;
            }

            wrap() {
                if (config.useTrails) {
                    const wrapped =
                        this.position.x > maximumSize.x ||
                        this.position.x < minimumSize.x ||
                        this.position.y > maximumSize.y ||
                        this.position.y < minimumSize.y;

                    if (wrapped) {
                        this.position.set(
                            random(minimumSize.x, maximumSize.x),
                            random(minimumSize.y, maximumSize.y)
                        );

                        this.sideTrail = this.trail.splice(
                            0,
                            this.trail.length,
                            this.position.copy()
                        );
                    }
                } else {
                    if (this.position.x > maximumSize.x)
                        this.position.x = minimumSize.x;
                    else if (this.position.x < minimumSize.x)
                        this.position.x = maximumSize.x;

                    if (this.position.y > maximumSize.y)
                        this.position.y = minimumSize.y;
                    else if (this.position.y < minimumSize.y)
                        this.position.y = maximumSize.y;
                }

                return this;
            }

            avoid(particles, radius) {
                const steering = Vector.create();
                let count = 0;

                for (let other of particles) {
                    if (other == this) continue;
                    const d = Vector.dist(this.position, other.position);
                    if (d > 0 && d < radius) {
                        const diff = Vector.sub(this.position, other.position)
                            .normalize()
                            .div(d);
                        steering.add(diff);
                        count++;
                    }
                }

                return steering.mag(0.5);
            }

            follow(columns, flowfield) {
                const flowIndex =
                    Math.floor(this.position.x) +
                    Math.floor(this.position.y) * columns;

                const force = flowfield[flowIndex].vector;
                return this.applyForce(force);
            }

            show() {
                if (config.useTrails) {
                    ctx.strokeStyle = this.color.color;
                    ctx.lineWidth = this.width;
                    ctx.beginPath();
                    ctx.moveTo(
                        this.trail[0].x * config.scale,
                        this.trail[0].y * config.scale
                    );
                    for (let i = 1; i < this.trail.length; i++) {
                        ctx.lineTo(
                            this.trail[i].x * config.scale,
                            this.trail[i].y * config.scale
                        );
                    }
                    ctx.stroke();

                    if (this.sideTrail.length > 0) {
                        ctx.beginPath();
                        ctx.moveTo(
                            this.sideTrail[0].x * config.scale,
                            this.sideTrail[0].y * config.scale
                        );
                        for (let i = 1; i < this.sideTrail.length; i++) {
                            ctx.lineTo(
                                this.sideTrail[i].x * config.scale,
                                this.sideTrail[i].y * config.scale
                            );
                        }
                        ctx.stroke();
                        this.sideTrail.splice(0, 1);
                    }
                } else {
                    ctx.fillStyle = this.rgbaString;
                    ctx.fillRect(
                        this.position.x * config.scale,
                        this.position.y * config.scale,
                        this.width,
                        this.width
                    );
                }
            }

            static create(minAlfa) {
                return new Particle(random(columns), random(rows), minAlfa);
            }
        }

        class Flow {
            constructor() {
                this.vector = Vector.create();
            }

            update(xOff, yOff, zOff) {
                const angle = noise(xOff, yOff, zOff) * TWO_PI;
                this.vector.fromAngle(angle).mag(2);
                return this;
            }

            show(x, y) {
                ctx.beginPath();
                ctx.moveTo(x, y);
                const v = this.vector.copy().mag(displayScale);
                ctx.lineTo(x + v.x, y + v.y);
                ctx.stroke();
            }

            static create() {
                return new Flow();
            }
        }

        function initialize() {
            displayScale = config.scale * 1.5;
            canvas.width = main.offsetWidth;
            canvas.height = main.offsetHeight;
            columns = Math.ceil(canvas.width / config.scale);
            rows = Math.ceil(canvas.height / config.scale);
            boundary = new Rectangle(
                (rows + 1) / 2,
                (columns + 1) / 2,
                rows + 1,
                columns + 1
            );
            maximumSize.set(columns, rows);
            background(ctx, "#333333");
            ctx.lineWidth = 1;
            ctx.strokeStyle = "white";
            ctx.lineCap = "round";

            for (let i = 0; i < particles.length; i++) particles[i].reset();
            amountOfFlows = (rows + 1) * (columns + 1);
            for (let i = 0; i < amountOfFlows; i++)
                if (!flowfield[i]) flowfield.push(Flow.create());
        }

        window.onresize = initialize;

        initialize();

        noiseDetail(config.lod, config.fallOff);

        for (let i = 0; i < amountOfFlows; i++) flowfield.push(Flow.create());
        for (let i = 0; i < config.particleAmount; i++)
            particles.push(
                Particle.create(map(i, 0, particles.length, 0.05, 0.8))
            );

        function draw() {
            framerate++;

            if (config.showFlow || config.useTrails) background(ctx, "#333333");

            let yOffset = 3;
            for (let y = 0; y <= rows; y++) {
                let xOffset = 3301;
                for (let x = 0; x <= columns; x++) {
                    const flow = flowfield[x + y * columns];
                    flow.update(xOffset, yOffset, zOffset);
                    if (config.showFlow)
                        flow.show(x * config.scale, y * config.scale);

                    xOffset += config.increment;
                }
                yOffset += config.increment;
            }
            zOffset += 0.001;

            if (config.showFlow) {
                requestAnimationFrame(draw);
                return;
            }

            const quadTree = new QuadTree(boundary, 4);
            for (let i = 0; i < particles.length; i++)
                quadTree.insert(particles[i]);

            for (let i = 0; i < config.particleAmount; i++) {
                if (!particles[i])
                    particles[i] = Particle.create(
                        map(i, 0, particles.length, 0.05, 0.8)
                    );

                const range = new Rectangle(
                    particles[i].position.x,
                    particles[i].position.y,
                    1,
                    1
                );

                particles[i]
                    .applyForce(particles[i].avoid(quadTree.query(range), 0.8))
                    .update()
                    .wrap()
                    .follow(columns, flowfield)
                    .show(ctx, config.scale);
            }

            requestAnimationFrame(draw);
        }

        setInterval(() => {
            if (config.logFramerate)
                spanFramerate.textContent = `${framerate}fps`;
            framerate = 0;
        }, 1000);

        if (config.logFramerate) toggleCheckbox(inputLogFramerate);
        inputLogFramerate.onchange = () => {
            config.logFramerate = !config.logFramerate;
            setParamConfig(config);
            if (!config.logFramerate) spanFramerate.textContent = "";
        };

        if (config.showFlow) toggleCheckbox(inputShowFlow);
        inputShowFlow.onchange = () => {
            config.showFlow = !config.showFlow;
            background(ctx, "#333333");
            ctx.fillStyle = "hsla(26, 20%, 100%, 0.1)";
            ctx.lineWidth = 1;
            ctx.strokeStyle = "white";
            ctx.lineCap = "round";
            setParamConfig(config);
        };

        if (config.useTrails) toggleCheckbox(inputUseTrails);
        inputUseTrails.onchange = () => {
            config.useTrails = !config.useTrails;
            if (!config.useTrails) {
                background(ctx, "#333333");
                ctx.lineWidth = 1;
                ctx.strokeStyle = "white";
            }
            setParamConfig(config);
        };

        inputParticleAmount.setAttribute("value", config.particleAmount);
        labelParticleAmount.textContent = config.particleAmount;
        inputParticleAmount.onchange = (event) => {
            labelParticleAmount.textContent = event.target.value;
            config.particleAmount = parseFloat(event.target.value);
            setParamConfig(config);
        };

        inputScale.setAttribute("value", config.scale);
        labelScale.textContent = config.scale;
        inputScale.onchange = (event) => {
            labelScale.textContent = event.target.value;
            config.scale = parseFloat(event.target.value);
            initialize();
            setParamConfig(config);
        };

        for (const colorPaletteOption of optionsColorPalette) {
            const value = colorPaletteOption.getAttribute("value");
            if (value === config.colorPalette) {
                colorPaletteOption.setAttribute("selected", "");
                break;
            }
        }
        inputColorPalette.onchange = (event) => {
            config.colorPalette = event.target.value;
            for (const p of particles)
                p.updateColor(COLOR_PALETTES[config.colorPalette]);
            setParamConfig(config);
        };

        draw();
    </script>
</Layout>
