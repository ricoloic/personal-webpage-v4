---
import Layout from "../../layouts/Layout.astro";
import Checkbox from "../../components/inputs/Checkbox.astro";
import Range from "../../components/inputs/Range.astro";
import Fab from "../../components/Fab.astro";
import Canvas from "../../components/Canvas.astro";
import Controls from "../../components/Controls.astro";
import FabDropdown from "../../components/FabDropdown.astro";
import MenuIcon from "../../components/icons/MenuIcon.astro";
import ColorButton from "../../components/ColorButton.astro";
---

<Layout
    title="Times Table"
    previewImage="https://rico.studio/assets/website-previews/times-table.png">
    <Canvas id="times-table-canvas">
        <Fab slot="edit">
            <FabDropdown id="color">
                <div slot="button" id="color-pill" class="rounded-full"></div>

                <div
                    slot="dropdown"
                    class="flex gap-2 max-w-full flex-wrap justify-between">
                    <ColorButton name="red" color="#ff0000" />
                    <ColorButton name="green" color="#00ff00" />
                    <ColorButton name="yellow" color="#ffff00" />
                    <ColorButton name="cyan" color="#00ffff" />
                    <ColorButton name="magenta" color="#ff00ff" />
                    <ColorButton name="lightcoral" color="#f08080" />
                    <ColorButton name="greenyellow" color="#adff2f" />
                    <ColorButton name="white" color="#ffffff" />
                </div>
            </FabDropdown>
            <FabDropdown id="edit">
                <MenuIcon slot="button" />
                <Controls slot="dropdown">
                    <Checkbox
                        id="log-framerate-checkbox"
                        title="Log Framerate"
                    />
                    <Range
                        id="point-amount-range"
                        title="Point Amount"
                        min={50}
                        max={2000}
                        step={1}
                    />
                    <Range
                        id="multiplier-range"
                        title="Multiplier"
                        min={2}
                        max={500}
                        step={1}
                    />
                    <Range
                        id="transparency-range"
                        title="Transparency"
                        min={1}
                        max={255}
                        step={1}
                    />
                    <Range
                        id="line-thickness-range"
                        title="Line Thickness"
                        min={1}
                        max={15}
                        step={1}
                    />
                </Controls>
            </FabDropdown>
        </Fab>
    </Canvas>

    <!-- SECTION: STATIC_IMPORTS -->
    <script is:inline src="/js/utils/draw.js"></script>
    <script is:inline src="/js/utils/core.js"></script>
    <script is:inline src="/js/utils/color.js"></script>
    <script is:inline src="/js/utils/url.js"></script>
    <script is:inline src="/js/classes/vector.js"></script>
    <script is:inline src="/js/config/use-colors.js"></script>
    <!-- ENDSECTION: STATIC_IMPORTS -->

    <script is:inline>
    const config = {
        amountOfPoints: 200,
        multiplier: 2,
        radius: 0,
        transparency: 60,
        lineThickness: 2,
        color: "#ffffff",
        logFramerate: true,
    };
    prefillConfig(config);
    setParamConfig(config);

    const eLogFramerateCheckbox = document.getElementById(
        "log-framerate-checkbox"
    );
    const eFramerate = document.getElementById("framerate");
    const ePointAmountRange = document.getElementById("point-amount-range");
    const ePointAmountLabel = document.querySelector(
        'label[for="point-amount-range"]>span'
    );
    const eMultiplierRange = document.getElementById("multiplier-range");
    const eMultiplierLabel = document.querySelector(
        'label[for="multiplier-range"]>span'
    );
    const eTransparencyRange =
        document.getElementById("transparency-range");
    const eTransparencyLabel = document.querySelector(
        'label[for="transparency-range"]>span'
    );
    const eLineThicknessRange = document.getElementById(
        "line-thickness-range"
    );
    const eLineThicknessLabel = document.querySelector(
        'label[for="line-thickness-range"]>span'
    );

    useColors(config);

    if (config.logFramerate) toggleCheckbox(eLogFramerateCheckbox);
    eLogFramerateCheckbox.addEventListener("change", function () {
        config.logFramerate = !config.logFramerate;
        setParamConfig(config);
        if (!config.logFramerate) eFramerate.textContent = "";
    });

    eMultiplierRange.setAttribute("value", config.multiplier);
    eMultiplierLabel.textContent = config.multiplier;
    eMultiplierRange.addEventListener("change", function (event) {
        config.multiplier = parseInt(event.target.value, 10);
        eMultiplierLabel.textContent = event.target.value;
        setParamConfig(config);
    });

    ePointAmountRange.setAttribute("value", config.amountOfPoints);
    ePointAmountLabel.textContent = config.amountOfPoints;
    ePointAmountRange.addEventListener("change", function (event) {
        config.amountOfPoints = parseInt(event.target.value, 10);
        ePointAmountLabel.textContent = event.target.value;
        setParamConfig(config);
    });

    eTransparencyRange.setAttribute("value", config.transparency);
    eTransparencyLabel.textContent = config.transparency;
    eTransparencyRange.addEventListener("change", function (event) {
        config.transparency = parseInt(event.target.value, 10);
        eTransparencyLabel.textContent = event.target.value;
        setParamConfig(config);
    });

    eLineThicknessRange.setAttribute("value", config.lineThickness);
    eLineThicknessLabel.textContent = config.lineThickness;
    eLineThicknessRange.addEventListener("change", function (event) {
        config.lineThickness = parseInt(event.target.value, 10);
        eLineThicknessLabel.textContent = event.target.value;
        setParamConfig(config);
    });

    const eMain = document.getElementById("canvas-wrapper");
    const eCanvas = document.getElementById("times-table-canvas");
    eCanvas.width = eMain.offsetWidth;
    eCanvas.height = eMain.offsetHeight;
    let halfWidth = eCanvas.width / 2,
        halfHeight = eCanvas.height / 2;
    let radius = min(halfWidth, halfHeight) - 50;

    window.addEventListener("resize", function () {
        eCanvas.width = eMain.offsetWidth;
        eCanvas.height = eMain.offsetHeight;
        halfWidth = eCanvas.width / 2;
        halfHeight = eCanvas.height / 2;
        radius = min(halfWidth, halfHeight) - 50;
    });

    const ctx = eCanvas.getContext("2d");
    ctx.lineCap = "round";

    function calculatePositionFromIteration(iteration) {
        const angle = map(iteration, 0, config.amountOfPoints, 0, TWO_PI);
        return Vector.create(
            Math.cos(angle) * radius + halfWidth,
            Math.sin(angle) * radius + halfHeight
        );
    }

    let framerate = 0;

    function draw() {
        framerate++;

        background(ctx, "#333333");

        for (let i = 0; i < config.amountOfPoints; i++) {
            const thint = (config.transparency / 16)
                .toString(16)
                .replaceAll(".", "")
                .padStart(2, "0");
            ctx.strokeStyle = `${config.color}${thint}`;
            ctx.lineWidth = config.lineThickness;
            const point1 = calculatePositionFromIteration(i);
            const j = (i * config.multiplier) % config.amountOfPoints;
            const point2 = calculatePositionFromIteration(j);

            strokeLine(ctx, point1.x, point1.y, point2.x, point2.y);
        }
        requestAnimationFrame(draw);
    }

    setInterval(function () {
        if (config.logFramerate) eFramerate.textContent = `${framerate}fps`;
        framerate = 0;
    }, 1000);

    draw();
    </script>
</Layout>
