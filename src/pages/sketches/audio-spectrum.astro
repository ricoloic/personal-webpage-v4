---
import Layout from "../../layouts/Layout.astro";
import Checkbox from "../../components/inputs/Checkbox.astro";
import Dropdown from "../../components/inputs/Dropdown.astro";
import Range from "../../components/inputs/Range.astro";
import Fab from "../../components/Fab.astro";
import Canvas from "../../components/Canvas.astro";
import Controls from "../../components/Controls.astro";
import FabButton from "../../components/FabButton.astro";
import PlayIcon from "../../components/icons/PlayIcon.astro";
import PauseIcon from "../../components/icons/PauseIcon.astro";

const colors = {
    pink: [
        "#6b2d5cff",
        "#8d3060ff",
        "#ae3364ff",
        "#cf3668ff",
        "#f0386bff",
        "#f84671ff",
        "#ff5376ff",
        "#fe6f8bff",
        "#fc8a9fff",
        "#f8c0c8ff",
    ],
    blue: [
        "#13293d",
        "#0a4769",
        "#006494",
        "#0e7eba",
        "#1b98e0",
        "#4fafe5",
        "#82c5e9",
        "#b5dbee",
        "#e8f1f2",
    ],
    orange: [
        "#e59153",
        "#f19857",
        "#fc9f5b",
        "#fcac6d",
        "#fcb87f",
        "#fcbf88",
        "#fcc591",
        "#fbd1a2",
        "#f4dbad",
        "#f5deb4",
    ],
    green: [
        "#172815",
        "#2b3f1c",
        "#3e5622",
        "#4b652f",
        "#57743c",
        "#648349",
        "#709255",
        "#7a9b5b",
        "#83a360",
        "#95b46a",
    ],
    greenToRed: [
        "#abe188",
        "#d1e891",
        "#e4ec95",
        "#eeee97",
        "#f7ef99",
        "#f6e295",
        "#f4d590",
        "#f1bb87",
        "#f4a578",
        "#f78e69",
    ],
};
---

<Layout title="Audio Spectrum">
    <Canvas id="audio-spectrum-canvas">
        <Fab slot="edit">
            <FabButton name="toggle">
                <span id="play-icon">
                    <PlayIcon />
                </span>
                <span id="pause-icon" class="hidden">
                    <PauseIcon />
                </span>
            </FabButton>
            <Controls slot="controls">
                <Checkbox id="log-framerate-checkbox" title="Log Framerate" />
                <Checkbox id="filled-checkbox" title="Filled" />
                <Range
                    id="min-freq-range"
                    title="Min Frequency"
                    min={10}
                    max={9999}
                    step={10}
                />
                <Range
                    id="max-freq-range"
                    title="Max Frequency"
                    min={11}
                    max={10000}
                    step={10}
                />
                <Range
                    id="max-wave-range"
                    title="Max Wave Amount"
                    min={1}
                    max={10}
                    step={1}
                />
                <Dropdown
                    id="freq-domain-dropdown"
                    title="Frequency Domain"
                    options={[
                        { value: "64", label: "64" },
                        { value: "128", label: "128" },
                        { value: "256", label: "256" },
                        { value: "512", label: "512" },
                        { value: "1024", label: "1024" },
                        { value: "2048", label: "2048" },
                        { value: "4096", label: "4096" },
                        { value: "8192", label: "8192" },
                        { value: "16384", label: "16384" },
                        { value: "32768", label: "32768" },
                    ]}
                />
                <Dropdown
                    id="palette-dropdown"
                    title="Palette"
                    options={[
                        { value: "random", label: "random" },
                        ...Object.keys(colors).map(function (palette) {
                            return { value: palette, label: palette };
                        }),
                    ]}
                />
            </Controls>
        </Fab>
    </Canvas>

    <!-- SECTION: STATIC_IMPORTS -->
    <script is:inline src="/js/utils/html.js"></script>
    <script is:inline src="/js/classes/vector.js"></script>
    <script is:inline src="/js/utils/core.js"></script>
    <script is:inline src="/js/utils/draw.js"></script>
    <script is:inline src="/js/utils/url.js"></script>
    <script is:inline src="/js/classes/audio-controller.js"></script>
    <!-- ENDSECTION: STATIC_IMPORTS -->

    <script is:inline define:vars={{ colors }}>
        const config = {
            minFreq: 10,
            maxFreq: 1000,
            freqDomain: 2048,
            filled: false,
            palette: "pink",
            maxWave: 10,
            logFramerate: true,
        };
        prefillConfig(config);
        setParamConfig(config);

        let currentPalette = config.palette;

        function initRandomPalette() {
            setTimeout(function () {
                if (config.palette == "random") {
                    currentPalette = random(Object.keys(colors));
                    initRandomPalette();
                }
            }, 2000);
        }

        if (config.palette == "random") {
            currentPalette = random(Object.keys(colors));
            initRandomPalette();
        }

        const eLogFramerateCheckbox = document.getElementById(
            "log-framerate-checkbox"
        );
        const eFramerate = document.getElementById("framerate");
        const eToggle = document.querySelector('button[name="toggle"]');
        const iPauseIcon = document.getElementById("pause-icon");
        const iPlayIcon = document.getElementById("play-icon");
        const eFreqDomainDropdown = document.getElementById(
            "freq-domain-dropdown"
        );
        const eFreqDomainOptions = document.querySelectorAll(
            "#freq-domain-dropdown>option"
        );
        const ePaletteDropdown = document.getElementById("palette-dropdown");
        const ePaletteOptions = document.querySelectorAll(
            "#palette-dropdown>option"
        );
        const eMinFreqRange = document.getElementById("min-freq-range");
        const eMinFreqLabel = document.querySelector(
            'label[for="min-freq-range"]>span'
        );
        const eMaxFreqRange = document.getElementById("max-freq-range");
        const eMaxFreqLabel = document.querySelector(
            'label[for="max-freq-range"]>span'
        );
        const eMaxWaveRange = document.getElementById("max-wave-range");
        const eMaxWaveLabel = document.querySelector(
            'label[for="max-wave-range"]>span'
        );
        const eFilledCheckbox = document.getElementById("filled-checkbox");

        if (config.logFramerate) toggleCheckbox(eLogFramerateCheckbox);
        eLogFramerateCheckbox.addEventListener("change", function () {
            config.logFramerate = !config.logFramerate;
            setParamConfig(config);
            if (!config.logFramerate) eFramerate.textContent = "";
        });

        if (config.filled) toggleCheckbox(eFilledCheckbox);
        eFilledCheckbox.addEventListener("change", function () {
            config.filled = !config.filled;
            setParamConfig(config);
        });

        eMinFreqRange.setAttribute("value", config.minFreq);
        eMinFreqLabel.textContent = config.minFreq;
        eMinFreqRange.addEventListener("change", function (event) {
            eMinFreqLabel.textContent = event.target.value;
            config.minFreq = parseFloat(event.target.value);
            setParamConfig(config);
        });
        eMaxFreqRange.setAttribute("value", config.maxFreq);
        eMaxFreqLabel.textContent = config.maxFreq;
        eMaxFreqRange.addEventListener("change", function (event) {
            eMaxFreqLabel.textContent = event.target.value;
            config.maxFreq = parseFloat(event.target.value);
            setParamConfig(config);
        });
        eMaxWaveRange.setAttribute("value", config.maxWave);
        eMaxWaveLabel.textContent = config.maxWave;
        eMaxWaveRange.addEventListener("change", function (event) {
            eMaxWaveLabel.textContent = event.target.value;
            config.maxWave = parseFloat(event.target.value);
            setParamConfig(config);
        });

        for (const freqDomainOption of eFreqDomainOptions) {
            const value = freqDomainOption.getAttribute("value");
            if (value == config.freqDomain) {
                freqDomainOption.setAttribute("selected", "");
                break;
            }
        }
        eFreqDomainDropdown.addEventListener("change", function (event) {
            config.freqDomain = parseInt(event.target.value, 10);
            setParamConfig(config);
        });

        for (const paletteOption of ePaletteOptions) {
            const value = paletteOption.getAttribute("value");
            if (value == config.palette) {
                paletteOption.setAttribute("selected", "");
                break;
            }
        }
        ePaletteDropdown.addEventListener("change", function (event) {
            config.palette = event.target.value;
            if (config.palette == "random") initRandomPalette();
            else currentPalette = config.palette;
            setParamConfig(config);
        });

        class Visualizer {
            constructor(baseRadius = 100) {
                this.incrementor = 0.001;
                this.baseRadius = baseRadius;
            }

            circle(
                ctx,
                freq,
                {
                    filled = false,
                    closed = false,
                    rMult = 1,
                    baseRadius = this.baseRadius,
                } = {
                    filled: false,
                    closed: false,
                    rMult: 1,
                    baseRadius: this.baseRadius,
                }
            ) {
                ctx.beginPath();
                ctx.moveTo(Math.cos(0) * freq[0], Math.sin(0) * freq[0]);
                for (
                    let a = this.incrementor;
                    a < TWO_PI;
                    a += this.incrementor
                ) {
                    const i = Math.floor(map(a, 0, TWO_PI, 0, freq.length));
                    const r = freq[i];
                    const x = Math.cos(a) * (r * rMult + baseRadius);
                    const y = Math.sin(a) * (r * rMult + baseRadius);
                    ctx.lineTo(x, y);
                }

                if (closed) ctx.closePath();
                if (filled) ctx.fill();
                else ctx.stroke();
            }

            mirroredCircle(
                ctx,
                freq,
                {
                    filled = false,
                    closed = false,
                    rMult = 1,
                    baseRadius = this.baseRadius,
                } = {
                    filled: false,
                    closed: false,
                    rMult: 1,
                    baseRadius: this.baseRadius,
                }
            ) {
                ctx.beginPath();
                ctx.moveTo(
                    Math.cos(0) * (freq[0] * rMult + baseRadius),
                    Math.sin(0) * (freq[0] * rMult + baseRadius)
                );
                for (let a = this.incrementor; a < PI; a += this.incrementor) {
                    const i = Math.floor(map(a, 0, PI, 0, freq.length));
                    const r = freq[i];
                    const x = Math.cos(a) * (r * rMult + baseRadius);
                    const y = Math.sin(a) * (r * rMult + baseRadius);
                    ctx.lineTo(x, y);
                }
                for (let a = PI; a >= 0; a -= this.incrementor) {
                    const ar = map(a, PI, 0, PI, TWO_PI);
                    const i = Math.floor(map(a, 0, PI, 0, freq.length));
                    const r = freq[i];
                    const x = Math.cos(ar) * (r * rMult + baseRadius);
                    const y = Math.sin(ar) * (r * rMult + baseRadius);
                    ctx.lineTo(x, y);
                }

                if (closed) ctx.closePath();
                if (filled) ctx.fill();
                else ctx.stroke();
            }

            points(
                ctx,
                freq,
                { radius = 2, rMult = 1, baseRadius = this.baseRadius } = {
                    radius: 2,
                    rMult: 1,
                    baseRadius: this.baseRadius,
                }
            ) {
                for (let a = 0; a < TWO_PI; a += this.incrementor) {
                    const i = Math.floor(map(a, 0, TWO_PI, 0, freq.length));
                    const r = freq[i];
                    const x = Math.cos(a) * (r * rMult + baseRadius);
                    const y = Math.sin(a) * (r * rMult + baseRadius);
                    ctx.fillRect(x, y, radius, radius);
                }
            }

            mirroredPoints(
                ctx,
                freq,
                { radius = 2, rMult = 1, baseRadius = this.baseRadius } = {
                    radius: 2,
                    rMult: 1,
                    baseRadius: this.baseRadius,
                }
            ) {
                ctx.beginPath();
                for (let a = 0; a < PI; a += this.incrementor) {
                    const i = Math.floor(map(a, 0, PI, 0, freq.length));
                    const r = freq[i];
                    const x = Math.cos(a) * (r * rMult + baseRadius);
                    const y = Math.sin(a) * (r * rMult + baseRadius);
                    ctx.fillRect(x, y, radius, radius);
                }
                for (let a = PI; a >= 0; a -= this.incrementor) {
                    const ar = map(a, PI, 0, PI, TWO_PI);
                    const i = Math.floor(map(a, 0, PI, 0, freq.length));
                    const r = freq[i];
                    const x = Math.cos(ar) * (r * rMult + baseRadius);
                    const y = Math.sin(ar) * (r * rMult + baseRadius);
                    ctx.fillRect(x, y, radius, radius);
                }
            }
        }

        const eMain = document.getElementById("canvas-wrapper");
        const eCanvas = document.getElementById("audio-spectrum-canvas");
        const ctx = eCanvas.getContext("2d");
        let halfWidth, halfHeight, halfMinimum;

        function initialize() {
            eCanvas.width = eMain.offsetWidth;
            eCanvas.height = eMain.offsetHeight;

            halfWidth = eCanvas.width / 2;
            halfHeight = eCanvas.height / 2;
            halfMinimum = min(halfWidth, halfHeight);
            background(ctx, "#333333");
        }

        window.addEventListener("resize", initialize);

        initialize();

        const audioController = AudioController.create();
        const toogleVisibility = () => {
            if (findClassIndex(iPlayIcon, "hidden") !== -1) {
                addClass(iPauseIcon, "hidden");
                removeClass(iPlayIcon, "hidden");
            } else {
                addClass(iPlayIcon, "hidden");
                removeClass(iPauseIcon, "hidden");
            }
        };
        audioController
            .load("/audio/Kirra.mp3")
            .then((ac) => ac.initialize())
            .then(() => {
                eCanvas.addEventListener("click", () => {
                    audioController.toggle();
                    toogleVisibility();
                });

                eToggle.addEventListener("click", () => {
                    audioController.toggle();
                    toogleVisibility();
                });
            });

        audioController.onended = () => {
            addClass(iPauseIcon, "hidden");
            removeClass(iPlayIcon, "hidden");
        };

        const visualizer = new Visualizer(10);

        let framerate = 0;

        const frequencyOffset = 10;
        const visualizerDelay = 10;

        function draw() {
            framerate++;

            if (audioController.initialized) {
                buildVisualizer(
                    colors[currentPalette],
                    visualizerDelay,
                    frequencyOffset
                );
            }

            requestAnimationFrame(draw);
        }

        function buildVisualizer(
            layerColors,
            delay,
            offsetFreq = 0,
            frequenciesList = []
        ) {
            let baseDelay = delay;

            if (frequenciesList.length == 0) {
                baseDelay = 0;
            }

            setTimeout(() => {
                const frequencies = audioController.analyzeFrequency({
                    fftSize: config.freqDomain,
                    minFrequency: config.minFreq,
                    maxFrequency: config.maxFreq + offsetFreq,
                });

                frequenciesList.push(frequencies);

                if (
                    frequenciesList.length !=
                    Math.min(layerColors.length, config.maxWave)
                ) {
                    buildVisualizer(
                        layerColors,
                        delay,
                        offsetFreq,
                        frequenciesList
                    );
                } else {
                    background(ctx, "#333333");
                    ctx.translate(halfWidth, halfHeight);
                    ctx.rotate(TWO_PI - PI / 2);

                    for (let i = 0; i < frequenciesList.length; i++) {
                        ctx.fillStyle = layerColors[i];
                        ctx.strokeStyle = layerColors[i];
                        visualizer.mirroredCircle(ctx, frequenciesList[i], {
                            filled: config.filled,
                            closed: true,
                            baseRadius: 100,
                        });
                    }

                    ctx.setTransform(1, 0, 0, 1, 0, 0);
                }
            }, baseDelay);
        }

        setInterval(function () {
            if (config.logFramerate) eFramerate.textContent = `${framerate}fps`;
            framerate = 0;
        }, 1000);

        draw();
    </script>
</Layout>
