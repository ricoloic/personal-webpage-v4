---
import Layout from "../../layouts/Layout.astro";
import Checkbox from "../../components/inputs/Checkbox.astro";
import Radio from "../../components/inputs/Radio.astro";
import Range from "../../components/inputs/Range.astro";
import Fab from "../../components/Fab.astro";
import Canvas from "../../components/Canvas.astro";
import Controls from "../../components/Controls.astro";
import FabButton from "../../components/FabButton.astro";
import PlayIcon from "../../components/icons/PlayIcon.astro";
import PauseIcon from "../../components/icons/PauseIcon.astro";
import MenuIcon from "../../components/icons/MenuIcon.astro";
import FabDropdown from "../../components/FabDropdown.astro";
import ColorButton from "../../components/ColorButton.astro";

const COLORS = {
    tacha: [
        "#3b1e0d",
        "#683c1f",
        "#7e4722",
        "#b87827",
        "#d1992f",
        "#dab345",
        "#dfc45f",
        "#ebdd9c",
        "#995a24",
        "#f5efd0",
        "#fcf9ee",
    ],
    green: [
        "#062d17",
        "#15522e",
        "#176435",
        "#167f3f",
        "#18a14c",
        "#24c362",
        "#3cd978",
        "#87eeae",
        "#bcf6d1",
        "#dcfce8",
        "#f0fdf4",
    ],
    pink: [
        "#4d0a30",
        "#7f1c55",
        "#981c63",
        "#b71f78",
        "#d42e94",
        "#e54bb1",
        "#ef77ca",
        "#f6abe1",
        "#f9d1ef",
        "#fbe8f6",
        "#fdf2fa",
    ],
    darkpurple: [
        "#2f2d3e",
        "#474462",
        "#57527b",
        "#656095",
        "#6e6ca4",
        "#7e7fb3",
        "#979bc3",
        "#b9bcd7",
        "#d6d8e7",
        "#e8e9f1",
        "#f5f6f9",
    ],
    firefly: [
        "#05282b",
        "#154a4c",
        "#135a5c",
        "#127173",
        "#118e90",
        "#19b3b2",
        "#32cfcb",
        "#62e6de",
        "#9cf3eb",
        "#cdfaf5",
        "#f0fdfb",
    ],
    kokoda: [
        "#1b1c17",
        "#363730",
        "#3d3e36",
        "#494b40",
        "#5e6050",
        "#6e705e",
        "#959784",
        "#b2b3a3",
        "#d0d0c6",
        "#e5e6e1",
        "#f4f4f1",
    ],
    yellow: [
        "#252c07",
        "#475116",
        "#545f15",
        "#697813",
        "#8b9d13",
        "#b3c51d",
        "#d1e040",
        "#e3ed69",
        "#f0f6a0",
        "#f8facd",
        "#fdfde8",
    ],
    cerise: [
        "#420f1b",
        "#77243b",
        "#8b263e",
        "#a52b45",
        "#c73f58",
        "#da596a",
        "#e78590",
        "#f0b1b7",
        "#f7d4d7",
        "#fbe8e8",
        "#fdf3f4",
    ],
    blue: [
        "#0a2b47",
        "#10436a",
        "#0c5080",
        "#095d9b",
        "#0976c0",
        "#1695e1",
        "#3faef1",
        "#82c9f7",
        "#a6d7f9",
        "#e1f0fd",
        "#f1f8fe",
    ],
};
---

<Layout title="Audio Spectrum">
    <script
        slot="head-layout"
        src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"
    ></script>

    <Canvas id="audio-spectrum-canvas">
        <div id="replace-me"></div>

        <Fab slot="edit">
            <FabButton name="toggle">
                <span id="play-icon">
                    <PlayIcon />
                </span>
                <span id="pause-icon" class="hidden">
                    <PauseIcon />
                </span>
            </FabButton>
            <FabButton name="upload-audio">
                <input
                    type="file"
                    class="hidden"
                    id="input-upload-audio"
                    accept="audio/mpeg, audio/mp4"
                />Select Audio
            </FabButton>
            <FabDropdown id="color">
                <div slot="button" id="color-pill" class="rounded-full"></div>

                <div
                    slot="dropdown"
                    class="flex gap-2 max-w-full flex-wrap justify-between">
                    {
                        Object.entries(COLORS).map(([key, value]) => (
                            <ColorButton name={key} color={value[5]} />
                        ))
                    }
                </div>
            </FabDropdown>
            <FabDropdown id="edit">
                <MenuIcon slot="button" />
                <Controls slot="dropdown">
                    <Checkbox
                        id="log-framerate-checkbox"
                        title="Log Framerate"
                    />
                    <Checkbox
                        id="reverse-colors-checkbox"
                        title="Reverse Colors"
                    />
                    <Range
                        id="base-radius-range"
                        title="Base Radius"
                        min={0}
                        max={200}
                        step={1}
                    />
                    <Range
                        id="blur-intensity-range"
                        title="Bluring Intensity"
                        min={0}
                        max={2}
                        step={0.1}
                    />
                    <Range
                        id="scale-intensity-range"
                        title="Scaling Intensity"
                        min={0}
                        max={2}
                        step={0.25}
                    />
                    <Range
                        id="shake-intensity-range"
                        title="Shaking Intensity"
                        min={0}
                        max={20}
                        step={1}
                    />
                    <Checkbox id="filled-checkbox" title="Filled" />
                    <Radio
                        id="visualizer-type-radio"
                        name="visualizer-type"
                        options={[
                            { value: "mirroredPoints", label: "Dots" },
                            { value: "mirroredCircle", label: "Lines" },
                        ]}
                    />
                    <Range
                        id="min-freq-range"
                        title="Min Frequency"
                        min={10}
                        max={9999}
                        step={10}
                    />
                    <Range
                        id="max-freq-range"
                        title="Max Frequency"
                        min={11}
                        max={10000}
                        step={10}
                    />
                    <Range
                        id="max-wave-range"
                        title="Max Wave Amount"
                        min={1}
                        max={10}
                        step={1}
                    />
                    <Range
                        id="wave-delay-range"
                        title="Wave Delay"
                        min={10}
                        max={150}
                        step={10}
                    />
                    <Range
                        id="freq-domain-range"
                        title="Frequency Domain"
                        min={6}
                        max={15}
                        step={1}
                    />
                </Controls>
            </FabDropdown>
        </Fab>
    </Canvas>

    <!-- SECTION: STATIC_IMPORTS -->
    <script is:inline src="/js/classes/vector.js"></script>
    <script is:inline src="/js/utils/core.js"></script>
    <script is:inline src="/js/utils/draw.js"></script>
    <script is:inline src="/js/utils/url.js"></script>
    <script is:inline src="/js/classes/audio-controller.js"></script>
    <!-- ENDSECTION: STATIC_IMPORTS -->

    <script is:inline define:vars={{ COLORS }}>
    const config = {
        reverseColors: false,
        visualizerType: "mirroredCircle",
        minFreq: 10,
        maxFreq: 2300,
        freqPow: 11,
        filled: false,
        palette: "pink",
        maxWave: 10,
        shakeIntencity: 10,
        scaleIntensity: 1,
        waveDelay: 10,
        blurIntensity: 1,
        baseRadius: 100,
        logFramerate: true,
    };
    prefillConfig(config);
    setParamConfig(config);

    let freqDomain = Math.pow(2, config.freqPow);
    let currentPalette = config.palette;
    function reverseColors() {
        for (const colorKey of Object.keys(COLORS))
            COLORS[colorKey].reverse();
    }
    if (config.reverseColors) reverseColors();

    const inputLogFramerate = $("#log-framerate-checkbox");
    const inputReverseColors = $("#reverse-colors-checkbox");
    const spanFramerate = $("#framerate");
    const divColorPill = $("#color-pill");
    const buttonTogglPlay = $('button[name="toggle"]');
    const spanPauseIcon = $("#pause-icon");
    const spanPlayIcon = $("#play-icon");
    const inputMinFreq = $("#min-freq-range");
    const labelMinFreq = $('label[for="min-freq-range"]>span');
    const inputMaxFreq = $("#max-freq-range");
    const labelMaxFreq = $('label[for="max-freq-range"]>span');
    const inputMaxWave = $("#max-wave-range");
    const labelMaxWave = $('label[for="max-wave-range"]>span');
    const inputFreqPow = $("#freq-domain-range");
    const labelFreqPow = $('label[for="freq-domain-range"]>span');
    const inputFilled = $("#filled-checkbox");
    const inputBlurIntencity = $("#blur-intensity-range");
    const labelBlurIntencity = $('label[for="blur-intensity-range"]>span');
    const inputShakeIntencity = $("#shake-intensity-range");
    const labelShakeIntencity = $(
        'label[for="shake-intensity-range"]>span'
    );
    const inputBaseRadius = $("#base-radius-range");
    const labelBaseRadius = $('label[for="base-radius-range"]>span');
    const inputScaleIntencity = $("#scale-intensity-range");
    const labelScaleIntencity = $(
        'label[for="scale-intensity-range"]>span'
    );
    const inputUploadAudio = $("#input-upload-audio");
    const inputWaveDelay = $("#wave-delay-range");
    const labelWaveDelay = $('label[for="wave-delay-range"]>span');
    const inputVisualizerTypes = $('input[name="visualizer-type"]');

    $('button[name="upload-audio"]').onclick = () =>
        inputUploadAudio.click();

    if (config.logFramerate) toggleCheckbox(inputLogFramerate);
    inputLogFramerate.onchange = () => {
        config.logFramerate = !config.logFramerate;
        if (!config.logFramerate) spanFramerate.textContent = "";
        setParamConfig(config);
    };

    if (config.filled) toggleCheckbox(inputFilled);
    inputFilled.onchange = () => {
        config.filled = !config.filled;
        setParamConfig(config);
    };

    if (config.reverseColors) toggleCheckbox(inputReverseColors);
    inputReverseColors.onchange = () => {
        config.reverseColors = !config.reverseColors;
        reverseColors();
        setParamConfig(config);
    };

    inputBaseRadius.setAttribute("value", config.baseRadius);
    labelBaseRadius.textContent = config.baseRadius;
    inputBaseRadius.onchange = (event) => {
        labelBaseRadius.textContent = event.target.value;
        config.baseRadius = parseFloat(event.target.value);
        setParamConfig(config);
    };

    inputBlurIntencity.setAttribute("value", config.blurIntensity);
    labelBlurIntencity.textContent = config.blurIntensity;
    inputBlurIntencity.onchange = (event) => {
        labelBlurIntencity.textContent = event.target.value;
        config.blurIntensity = parseFloat(event.target.value);
        setParamConfig(config);
    };

    inputScaleIntencity.setAttribute("value", config.scaleIntensity);
    labelScaleIntencity.textContent = config.scaleIntensity;
    inputScaleIntencity.onchange = (event) => {
        labelScaleIntencity.textContent = event.target.value;
        config.scaleIntensity = parseFloat(event.target.value);
        setParamConfig(config);
    };

    inputShakeIntencity.setAttribute("value", config.shakeIntencity);
    labelShakeIntencity.textContent = config.shakeIntencity;
    inputShakeIntencity.onchange = (event) => {
        labelShakeIntencity.textContent = event.target.value;
        config.shakeIntencity = parseFloat(event.target.value);
        setParamConfig(config);
    };

    inputWaveDelay.setAttribute("value", config.waveDelay);
    labelWaveDelay.textContent = config.waveDelay;
    inputWaveDelay.onchange = (event) => {
        labelWaveDelay.textContent = event.target.value;
        config.waveDelay = parseFloat(event.target.value);
        setParamConfig(config);
    };

    inputMinFreq.setAttribute("value", config.minFreq);
    labelMinFreq.textContent = config.minFreq;
    inputMinFreq.onchange = (event) => {
        labelMinFreq.textContent = event.target.value;
        config.minFreq = parseFloat(event.target.value);
        setParamConfig(config);
    };

    inputMaxFreq.setAttribute("value", config.maxFreq);
    labelMaxFreq.textContent = config.maxFreq;
    inputMaxFreq.onchange = (event) => {
        labelMaxFreq.textContent = event.target.value;
        config.maxFreq = parseFloat(event.target.value);
        setParamConfig(config);
    };

    inputMaxWave.setAttribute("value", config.maxWave);
    labelMaxWave.textContent = config.maxWave;
    inputMaxWave.onchange = (event) => {
        labelMaxWave.textContent = event.target.value;
        config.maxWave = parseFloat(event.target.value);
        setParamConfig(config);
    };

    inputFreqPow.setAttribute("value", config.freqPow);
    labelFreqPow.textContent = freqDomain;
    inputFreqPow.onchange = (event) => {
        config.freqPow = parseFloat(event.target.value);
        freqDomain = Math.pow(2, config.freqPow);
        labelFreqPow.textContent = freqDomain;
        setParamConfig(config);
    };

    for (const elem of inputVisualizerTypes)
        if (elem.getAttribute("value") == config.visualizerType)
            toggleCheckbox(elem);
    $("#visualizer-type-radio").onchange = (event) => {
        config.visualizerType = event.target.value;
        setParamConfig(config);
    };

    const eColorButtons = document.querySelectorAll(
        'button[data-name="color-button"]'
    );

    divColorPill.setAttribute(
        "style",
        `background-color: ${COLORS[config.palette][5]};`
    );
    for (const elem of eColorButtons) {
        elem.addEventListener("click", function () {
            config.palette = elem.getAttribute("data-color-name");
            currentPalette = config.palette;
            divColorPill.setAttribute(
                "style",
                `background-color: ${COLORS[config.palette][5]};`
            );
            setParamConfig(config);
        });
    }

    class Visualizer {
        constructor(baseRadius = 100) {
            this.incrementor = 0.001;
            this.baseRadius = baseRadius;
        }

        circle(
            ctx,
            freq,
            {
                filled = false,
                closed = false,
                rMult = 1,
                baseRadius = this.baseRadius,
            } = {
                    filled: false,
                    closed: false,
                    rMult: 1,
                    baseRadius: this.baseRadius,
                }
        ) {
            ctx.beginPath();
            ctx.moveTo(Math.cos(0) * freq[0], Math.sin(0) * freq[0]);
            for (
                let a = this.incrementor;
                a < TWO_PI;
                a += this.incrementor
            ) {
                const i = Math.floor(map(a, 0, TWO_PI, 0, freq.length));
                const r = freq[i];
                const x = Math.cos(a) * (r * rMult + baseRadius);
                const y = Math.sin(a) * (r * rMult + baseRadius);
                ctx.lineTo(x, y);
            }

            if (closed) ctx.closePath();
            if (filled) ctx.fill();
            else ctx.stroke();
        }

        mirroredCircle(
            ctx,
            freq,
            {
                filled = false,
                closed = false,
                rMult = 1,
                baseRadius = this.baseRadius,
            } = {
                    filled: false,
                    closed: false,
                    rMult: 1,
                    baseRadius: this.baseRadius,
                }
        ) {
            ctx.beginPath();
            ctx.moveTo(
                Math.cos(0) * (freq[0] * rMult + baseRadius),
                Math.sin(0) * (freq[0] * rMult + baseRadius)
            );
            for (let a = this.incrementor; a < PI; a += this.incrementor) {
                const i = Math.floor(map(a, 0, PI, 0, freq.length));
                const r = freq[i];
                const x = Math.cos(a) * (r * rMult + baseRadius);
                const y = Math.sin(a) * (r * rMult + baseRadius);
                ctx.lineTo(x, y);
            }
            for (let a = PI; a >= 0; a -= this.incrementor) {
                const ar = map(a, PI, 0, PI, TWO_PI);
                const i = Math.floor(map(a, 0, PI, 0, freq.length));
                const r = freq[i];
                const x = Math.cos(ar) * (r * rMult + baseRadius);
                const y = Math.sin(ar) * (r * rMult + baseRadius);
                ctx.lineTo(x, y);
            }

            if (closed) ctx.closePath();
            if (filled) ctx.fill();
            else ctx.stroke();
        }

        points(
            ctx,
            freq,
            { radius = 2, rMult = 1, baseRadius = this.baseRadius } = {
                radius: 2,
                rMult: 1,
                baseRadius: this.baseRadius,
            }
        ) {
            for (let a = 0; a < TWO_PI; a += 0.01) {
                const i = Math.floor(map(a, 0, TWO_PI, 0, freq.length));
                const r = freq[i];
                const x = Math.cos(a) * (r * rMult + baseRadius);
                const y = Math.sin(a) * (r * rMult + baseRadius);
                ctx.fillRect(x, y, radius, radius);
            }
        }

        mirroredPoints(
            ctx,
            freq,
            { radius = 2, rMult = 1, baseRadius = this.baseRadius } = {
                radius: 2,
                rMult: 1,
                baseRadius: this.baseRadius,
            }
        ) {
            ctx.beginPath();
            for (let a = 0; a < PI; a += 0.01) {
                const i = Math.floor(map(a, 0, PI, 0, freq.length));
                const r = freq[i];
                const x = Math.cos(a) * (r * rMult + baseRadius);
                const y = Math.sin(a) * (r * rMult + baseRadius);
                ctx.fillRect(x, y, radius, radius);
            }
            for (let a = PI; a >= 0; a -= 0.01) {
                const ar = map(a, PI, 0, PI, TWO_PI);
                const i = Math.floor(map(a, 0, PI, 0, freq.length));
                const r = freq[i];
                const x = Math.cos(ar) * (r * rMult + baseRadius);
                const y = Math.sin(ar) * (r * rMult + baseRadius);
                ctx.fillRect(x, y, radius, radius);
            }
        }
    }

    const eMain = document.getElementById("canvas-wrapper");
    const eCanvas = document.getElementById("audio-spectrum-canvas");
    const ctx = eCanvas.getContext("2d");
    let halfWidth,
        halfHeight,
        halfMinimum,
        scene,
        camera,
        material,
        texture,
        blurShader,
        renderer;

    scene = new THREE.Scene();
    camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
    renderer = new THREE.WebGLRenderer();
    document.getElementById("replace-me").replaceWith(renderer.domElement);
    renderer.domElement.setAttribute(
        "class",
        "block absolute top-0 right-0 bottom-0 left-0"
    );

    function initialize() {
        eCanvas.width = eMain.offsetWidth;
        eCanvas.height = eMain.offsetHeight;

        halfWidth = eCanvas.width / 2;
        halfHeight = eCanvas.height / 2;
        halfMinimum = min(halfWidth, halfHeight);
        background(ctx, "#333333");

        renderer.setSize(eMain.offsetWidth, eMain.offsetHeight);
        texture = new THREE.CanvasTexture(eCanvas);
        blurShader = {
            uniforms: {
                tDiffuse: { type: "t", value: texture },
                resolution: { type: "v2", value: new THREE.Vector2() },
                gain: { type: "f", value: 0 },
            },
            vertexShader: `
                varying vec2 vUv;
                void main() {
                    vUv = uv;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                }
            `,
            fragmentShader: `
                uniform sampler2D tDiffuse;
                uniform vec2 resolution;
                uniform float gain;
                varying vec2 vUv;

                void main() {
                    vec4 sum = vec4(0.0);
                    vec2 blurSize = gain * 1.5 / resolution;  // Scale blur size with gain
                    int radius = int(gain * 2.);  // Scale loop radius with gain, you may want to cap this value to a maximum

                    for (int i = -radius; i <= radius; i++) {
                        for (int j = -radius; j <= radius; j++) {
                            vec2 uv = vUv + vec2(j, i) * blurSize;
                            sum += texture2D(tDiffuse, uv);
                        }
                    }

                    gl_FragColor = sum / float((radius * 2 + 1) * (radius * 2 + 1));  // Adjust divisor based on total number of samples
                }
            `,
        };

        material = new THREE.ShaderMaterial({
            uniforms: blurShader.uniforms,
            vertexShader: blurShader.vertexShader,
            fragmentShader: blurShader.fragmentShader,
        });

        const geometry = new THREE.PlaneBufferGeometry(2, 2);
        const mesh = new THREE.Mesh(geometry, material);
        scene.add(mesh);
        blurShader.uniforms.resolution.value.set(
            eCanvas.width,
            eCanvas.height
        );
    }

    window.addEventListener("resize", initialize);

    initialize();

    let audioController;

    const toogleVisibility = () => {
        if (findClassIndex(spanPlayIcon, "hidden") !== -1) {
            addClass(spanPauseIcon, "hidden");
            removeClass(spanPlayIcon, "hidden");
        } else {
            addClass(spanPlayIcon, "hidden");
            removeClass(spanPauseIcon, "hidden");
        }
    };

    function initializeAudio(url) {
        addClass(spanPauseIcon, "hidden");
        removeClass(spanPlayIcon, "hidden");
        audioController?.disconnect();
        audioController = AudioController.create();
        audioController
            .load(url)
            .then((ac) => ac.initialize())
            .then(() => {
                // renderer.domElement.onclick = () => {
                //     audioController.toggle();
                //     toogleVisibility();
                // };

                buttonTogglPlay.onclick = () => {
                    audioController.toggle();
                    toogleVisibility();
                };
            });

        audioController.onended = () => {
            addClass(spanPauseIcon, "hidden");
            removeClass(spanPlayIcon, "hidden");
        };
    }

    initializeAudio("/audio/Hudson Lee & False Noise - Way Of Thought.mp3");

    inputUploadAudio.onchange = (event) => {
        if (event.target.files[0])
            initializeAudio(URL.createObjectURL(event.target.files[0]));
    };

    const visualizer = new Visualizer(10);

    let framerate = 0;

    const frequencyOffset = 10;
    blurShader.uniforms.resolution.value.set(eCanvas.width, eCanvas.height);
    function getAverageVolume(array) {
        const values = array.reduce((sum, value) => sum + value, 0);
        return values / array.length;
    }

    function draw() {
        framerate++;

        if (audioController.initialized) {
            buildVisualizer(
                COLORS[currentPalette],
                config.waveDelay,
                frequencyOffset
            );
        }
        requestAnimationFrame(draw);
    }

    function buildVisualizer(
        layerColors,
        delay,
        offsetFreq = 0,
        frequenciesList = []
    ) {
        let baseDelay = delay;

        if (frequenciesList.length == 0) {
            baseDelay = 0;
        }

        setTimeout(() => {
            const frequencies = audioController.analyzeFrequency({
                fftSize: freqDomain,
                minFrequency: config.minFreq,
                maxFrequency: config.maxFreq + offsetFreq,
            });

            if (!frequencies) return;

            frequenciesList.push(frequencies);

            const maxIteration = Math.min(
                layerColors.length,
                config.maxWave
            );
            if (frequenciesList.length != maxIteration) {
                buildVisualizer(
                    layerColors,
                    delay,
                    offsetFreq,
                    frequenciesList
                );
            } else {
                background(ctx, "#333333");
                ctx.translate(halfWidth, halfHeight);

                const averageVolume =
                    getAverageVolume(frequenciesList[0]) / 255;
                const scalling =
                    1 + (averageVolume / 3) * config.scaleIntensity;
                ctx.scale(scalling, scalling);
                const shaking = (averageVolume / 2) * config.shakeIntencity;
                const offsetX = (Math.random() - 0.5) * shaking;
                const offsetY = (Math.random() - 0.5) * shaking;
                ctx.rotate(TWO_PI - PI / 2);

                const start =
                    frequenciesList.length === layerColors.length
                        ? 0
                        : layerColors.length - frequenciesList.length;

                let j = 0;
                for (let i = start; i < layerColors.length; i++) {
                    ctx.fillStyle = layerColors[i];
                    ctx.strokeStyle = layerColors[i];

                    visualizer[config.visualizerType](
                        ctx,
                        frequenciesList[j],
                        {
                            filled: config.filled,
                            closed: true,
                            baseRadius: config.baseRadius,
                        }
                    );
                    j++;
                }

                ctx.setTransform(1, 0, 0, 1, offsetX, offsetY);

                if (blurShader.uniforms.gain?.value != undefined) {
                    blurShader.uniforms.gain.value = Math.min(
                        0.9,
                        averageVolume * config.blurIntensity
                    );
                }
                texture.needsUpdate = true;
                renderer.render(scene, camera);
            }
        }, baseDelay);
    }

    setInterval(function () {
        if (config.logFramerate)
            spanFramerate.textContent = `${framerate}fps`;
        framerate = 0;
    }, 1000);

        draw();
    </script>
</Layout>
