---
import Layout from "../../layouts/Layout.astro";
import COLOR_PALETTES from "../../constants/colors.js";
import Checkbox from "../../components/inputs/Checkbox.astro";
import Range from "../../components/inputs/Range.astro";
import Dropdown from "../../components/inputs/Dropdown.astro";
import EditFab from "../../components/EditFab.astro";

const paletteNames = Object.keys(COLOR_PALETTES);
const colorPaletteOptions = paletteNames.map(function (paletteName) {
    return { value: paletteName, label: paletteName };
});
---

<Layout title="Mouse Follow">
    <main
        id="canvas-wrapper"
        class="overflow-y-auto relative flex-1 overflow-hidden h-full">
        <span
            id="framerate"
            class="z-10 select-none px-1 absolute top-3 left-3 text-white bg-black"
        ></span>
        <canvas
            id="mouse-follow-canvas"
            class="block absolute top-0 right-0 bottom-0 left-0"></canvas>

        <EditFab>
            <ul slot="options" class="text-sm text-gray-700">
                <li class="text-sm text-gray-700 border-b-2 px-4 py-2">
                    <Checkbox
                        id="log-framerate-checkbox"
                        title="Log Framerate"
                    />
                </li>
                <li class="border-b-2 px-4 py-2 flex items-center">
                    <Checkbox id="show-blob-checkbox" title="Show Blob" />
                </li>
                <li class="border-b-2 px-4 py-2 flex items-center">
                    <Checkbox
                        id="show-particles-checkbox"
                        title="Show Particles"
                    />
                </li>
                <li class="border-b-2 px-4 py-2 flex items-center">
                    <Checkbox
                        id="show-particle-border-checkbox"
                        title="Show Particle Border"
                    />
                </li>
                <li class="border-b-2 px-4 py-2 flex items-center">
                    <Checkbox
                        id="show-particle-alfa-checkbox"
                        title="Show Particle Alfa"
                    />
                </li>
                <li class="border-b-2 px-4 py-2">
                    <Range
                        id="particle-amount-range"
                        title="Particle Amount"
                        min={10}
                        max={250}
                        step={5}
                    />
                </li>
                <li class="px-4 py-2">
                    <Dropdown
                        id="color-palette-dropdown"
                        title="Color Palette"
                        options={colorPaletteOptions}
                    />
                </li>
            </ul>
        </EditFab>
    </main>

    <!-- SECTION: STATIC_IMPORTS -->
    <script is:inline src="/js/utils/html.js"></script>
    <script is:inline src="/js/utils/mouse.js"></script>
    <script is:inline src="/js/utils/draw.js"></script>
    <script is:inline src="/js/utils/core.js"></script>
    <script is:inline src="/js/utils/color.js"></script>
    <script is:inline src="/js/classes/vector.js"></script>
    <!-- ENDSECTION: STATIC_IMPORTS -->

    <!-- SECTION: CONFIG -->
    <script is:inline>
        const config = {
            showBlob: true,
            showParticles: true,
            showParticleBorder: false,
            showParticleAlfa: false,
            particleAmount: 70,
            colorPalette: "deep",
            logFramerate: true,
        };

        const eLogFramerateCheckbox = document.getElementById(
            "log-framerate-checkbox"
        );
        const eFramerate = document.getElementById("framerate");
        const eShowBlobCheckbox = document.getElementById("show-blob-checkbox");
        const eShowParticlesCheckbox = document.getElementById(
            "show-particles-checkbox"
        );
        const eShowParticleBorderCheckbox = document.getElementById(
            "show-particle-border-checkbox"
        );
        const eShowParticleAlfaCheckbox = document.getElementById(
            "show-particle-alfa-checkbox"
        );
        const eParticleAmountRange = document.getElementById(
            "particle-amount-range"
        );
        const eParticleAmountLabel = document.querySelector(
            'label[for="particle-amount-range"]>span'
        );
        const eColorPaletteDropdown = document.getElementById(
            "color-palette-dropdown"
        );
        const eColorPaletteOptions = document.querySelectorAll(
            "#color-palette-select>option"
        );

        if (config.logFramerate) toggleCheckbox(eLogFramerateCheckbox);
        eLogFramerateCheckbox.addEventListener("change", function () {
            config.logFramerate = !config.logFramerate;
            if (!config.logFramerate) eFramerate.textContent = "";
        });

        if (config.showBlob) toggleCheckbox(eShowBlobCheckbox);
        eShowBlobCheckbox.addEventListener("change", function () {
            config.showBlob = !config.showBlob;
        });

        if (config.showParticles) toggleCheckbox(eShowParticlesCheckbox);
        eShowParticlesCheckbox.addEventListener("change", function () {
            config.showParticles = !config.showParticles;
        });

        if (config.showParticleBorder)
            toggleCheckbox(eShowParticleBorderCheckbox);
        eShowParticleBorderCheckbox.addEventListener("change", function () {
            config.showParticleBorder = !config.showParticleBorder;
        });

        if (config.showParticleAlfa) toggleCheckbox(eShowParticleAlfaCheckbox);
        eShowParticleAlfaCheckbox.addEventListener("change", function () {
            config.showParticleAlfa = !config.showParticleAlfa;
        });

        eParticleAmountRange.setAttribute("value", config.particleAmount);
        eParticleAmountLabel.textContent = config.particleAmount;
        eParticleAmountRange.addEventListener("change", function (event) {
            eParticleAmountLabel.textContent = event.target.value;
            config.particleAmount = parseFloat(event.target.value);
        });

        for (const colorPaletteOption of eColorPaletteOptions) {
            const value = colorPaletteOption.getAttribute("value");
            if (value === config.colorPalette) {
                colorPaletteOption.setAttribute("selected", "");
                break;
            }
        }
        eColorPaletteDropdown.addEventListener("change", function (event) {
            config.colorPalette = event.target.value;
        });
    </script>
    <!-- ENDSECTION: CONFIG -->

    <!-- SECTION: PARTICLE_CLASS -->
    <script is:inline>
        class Particle {
            constructor(position, color) {
                this.color = color;
                this.lifespan = 1;
                this.position = position.copy();
                this.velocity = Vector.create(random(-1, 1), random(-1, 1));
            }

            reset(position, color) {
                this.color = color;
                this.lifespan = 1;
                this.position.set(position);
                this.velocity.set(random(-1, 1), random(-1, 1));
                return this;
            }

            update() {
                this.position.add(this.velocity);
                this.lifespan -= random(0.035, 0.045);
                return this;
            }

            show(ctx, border, alfa) {
                ctx.fillStyle = colorToString(
                    this.color,
                    alfa ? this.lifespan : 1
                );
                fillCircle(ctx, this.position.x, this.position.y, 8);
                if (border) {
                    ctx.strokeStyle = "#ffffff";
                    ctx.stroke();
                }
                return this;
            }

            isFinished() {
                return this.lifespan < 0;
            }

            static create(...args) {
                return new Particle(...args);
            }
        }
    </script>
    <!-- ENDSECTION: PARTICLE_CLASS -->

    <!-- SECTION: SKETCH -->
    <script is:inline define:vars={{ COLOR_PALETTES }}>
        const eMain = document.getElementById("canvas-wrapper");
        const eCanvas = document.getElementById("mouse-follow-canvas");
        eCanvas.width = eMain.offsetWidth;
        eCanvas.height = eMain.offsetHeight;

        window.addEventListener("resize", function () {
            eCanvas.width = eMain.offsetWidth;
            eCanvas.height = eMain.offsetHeight;
        });

        const ctx = eCanvas.getContext("2d");
        const mouse = mousePosition(eCanvas);
        const particles = [];

        ctx.lineWidth = 1;

        let framerate = 0;

        function draw() {
            framerate++;

            background(ctx, "#333333");

            if (particles.length < config.particleAmount) {
                particles.push(
                    Particle.create(
                        Vector.fromObject(mouse),
                        random(COLOR_PALETTES[config.colorPalette])
                    )
                );
            } else if (particles.length > config.particleAmount) {
                particles.pop();
            }

            const averagePosition = Vector.create();

            for (let i = 0; i < particles.length; i++) {
                const particle = particles[i];
                particle.update();
                if (config.showParticles) {
                    particle.show(
                        ctx,
                        config.showParticleBorder,
                        config.showParticleAlfa
                    );
                }
                averagePosition.add(particle.position);
                if (particle.isFinished()) {
                    particle.reset(
                        Vector.fromObject(mouse),
                        random(COLOR_PALETTES[config.colorPalette])
                    );
                }
            }
            averagePosition.div(particles.length);

            if (config.showBlob) {
                ctx.stroke;
                ctx.fillStyle = "#ffffff";
                fillCircle(ctx, averagePosition.x, averagePosition.y, 25);
            }
            requestAnimationFrame(draw);
        }

        setInterval(function () {
            if (config.logFramerate) eFramerate.textContent = `${framerate}fps`;
            framerate = 0;
        }, 1000);

        draw();
    </script>
    <!-- ENDSECTION: SKETCH -->
</Layout>
