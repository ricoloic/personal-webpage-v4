---
import Layout from "../../layouts/Layout.astro";
import Checkbox from "../../components/inputs/Checkbox.astro";
import Fab from "../../components/Fab.astro";
import Canvas from "../../components/Canvas.astro";
import Controls from "../../components/Controls.astro";
---

<Layout title="Quadratic Besier Curve">
    <Canvas id="quadratic-besier-curve-canvas">
        <Fab slot="edit">
            <Controls slot="controls">
                <Checkbox id="log-framerate-checkbox" title="Log Framerate" />
                <Checkbox
                    id="show-control-lines-checkbox"
                    title="Show Control Lines"
                />
            </Controls>
        </Fab>
    </Canvas>

    <!-- SECTION: STATIC_IMPORTS -->
    <script is:inline src="/js/utils/html.js"></script>
    <script is:inline src="/js/utils/draw.js"></script>
    <script is:inline src="/js/utils/mouse.js"></script>
    <script is:inline src="/js/utils/core.js"></script>
    <script is:inline src="/js/utils/color.js"></script>
    <script is:inline src="/js/utils/url.js"></script>
    <script is:inline src="/js/classes/vector.js"></script>
    <!-- ENDSECTION: STATIC_IMPORTS -->

    <script is:inline>
        const config = {
            pointRadius: 10,
            displayControlLines: true,
            logFramerate: true,
        };
        prefillConfig(config);
        setParamConfig(config);

        const eLogFramerateCheckbox = document.getElementById(
            "log-framerate-checkbox"
        );
        const eFramerate = document.getElementById("framerate");
        const eShowControlLinesCheckbox = document.getElementById(
            "show-control-lines-checkbox"
        );

        if (config.logFramerate) toggleCheckbox(eLogFramerateCheckbox);
        eLogFramerateCheckbox.addEventListener("change", function () {
            config.logFramerate = !config.logFramerate;
            setParamConfig(config);
            if (!config.logFramerate) eFramerate.textContent = "";
        });

        if (config.displayControlLines)
            toggleCheckbox(eShowControlLinesCheckbox);
        eShowControlLinesCheckbox.addEventListener("change", function () {
            config.displayControlLines = !config.displayControlLines;
            setParamConfig(config);
        });

        class Point {
            constructor(vector, radius = 5, text = "") {
                this.radius = radius;
                this.text = text;
                this.vector = vector;
                this.selected = false;
            }

            hover(mouse) {
                return (
                    dist(mouse.x, mouse.y, this.vector.x, this.vector.y) <=
                    this.radius
                );
            }

            update(mouse) {
                if (this.selected) {
                    this.vector.set(mouse.x, mouse.y);
                }
            }

            show(ctx) {
                ctx.fillStyle = "white";
                fillCircle(ctx, this.vector.x, this.vector.y, this.radius);
                ctx.strokeStyle = "white";
                ctx.fillText(this.text, this.vector.x + 15, this.vector.y + 15);
            }

            lineToPoint(ctx, point) {
                ctx.lineWidth = 1;
                ctx.strokeStyle = "tomato";
                strokeLine(
                    ctx,
                    this.vector.x,
                    this.vector.y,
                    point.vector.x,
                    point.vector.y
                );
            }
        }

        const eMain = document.getElementById("canvas-wrapper");
        const eCanvas = document.getElementById(
            "quadratic-besier-curve-canvas"
        );
        eCanvas.width = eMain.offsetWidth;
        eCanvas.height = eMain.offsetHeight;
        const mouse = mousePosition(eCanvas);
        let halfWidth = eCanvas.width / 2,
            halfHeight = eCanvas.height / 2;
        const points = [];
        let initiated = false;

        function assignPoints() {
            const minMult = 150;
            const v1 = [halfWidth + minMult, halfHeight + minMult];
            const v2 = [halfWidth, halfHeight - minMult];
            const v3 = [halfWidth - minMult, halfHeight + minMult];
            if (initiated) {
                points[0].vector.set(v1[0], v1[1]);
                points[1].vector.set(v2[0], v2[1]);
                points[2].vector.set(v3[0], v3[1]);
            } else {
                points.push(
                    new Point(
                        Vector.create(v1[0], v1[1]),
                        config.pointRadius,
                        "P1"
                    )
                );
                points.push(
                    new Point(
                        Vector.create(v2[0], v2[1]),
                        config.pointRadius,
                        "P2"
                    )
                );
                points.push(
                    new Point(
                        Vector.create(v3[0], v3[1]),
                        config.pointRadius,
                        "P3"
                    )
                );
                initiated = true;
            }
        }

        window.addEventListener("resize", function () {
            eCanvas.width = eMain.offsetWidth;
            eCanvas.height = eMain.offsetHeight;
            halfWidth = eCanvas.width / 2;
            halfHeight = eCanvas.height / 2;
            assignPoints();
        });

        const ctx = eCanvas.getContext("2d");

        const curvePoint = { x: 0, y: 0 };
        function calculateCurve(t, pt1, pt2, pt3) {
            function calc(axis) {
                return (
                    pt2.vector[axis] +
                    (1 - t) * (1 - t) * (pt1.vector[axis] - pt2.vector[axis]) +
                    t * t * (pt3.vector[axis] - pt2.vector[axis])
                );
            }

            curvePoint.x = calc("x");
            curvePoint.y = calc("y");
        }

        let framerate = 0;
        let t = 0;

        assignPoints();

        function draw() {
            framerate++;

            background(ctx, "#333333");

            ctx.fillStyle = "white";
            ctx.font = "20px serif";

            if (t >= 1) t = 0;
            t += 0.001;

            ctx.lineWidth = 2;
            ctx.strokeStyle = "white";
            ctx.beginPath();
            calculateCurve(0, points[0], points[1], points[2]);
            ctx.moveTo(curvePoint.x, curvePoint.y);
            for (let i = 0.01; i <= 1.0000001; i += 0.01) {
                calculateCurve(i, points[0], points[1], points[2]);
                ctx.lineTo(curvePoint.x, curvePoint.y);
            }
            ctx.stroke();

            if (config.displayControlLines) {
                points[0].lineToPoint(ctx, points[1]);
                points[1].lineToPoint(ctx, points[2]);

                ctx.lineWidth = 1;
                ctx.strokeStyle = "#f9c846"; //Â yellow-ish
                const a1 = [
                    lerp(points[0].vector.x, points[1].vector.x, t),
                    lerp(points[0].vector.y, points[1].vector.y, t),
                ];
                const a2 = [
                    lerp(points[1].vector.x, points[2].vector.x, t),
                    lerp(points[1].vector.y, points[2].vector.y, t),
                ];
                strokeLine(ctx, a1[0], a1[1], a2[0], a2[1]);
                calculateCurve(t, points[0], points[1], points[2]);

                ctx.fillText(
                    t.toString().slice(0, 4),
                    curvePoint.x - 15,
                    curvePoint.y + 15
                );
            }

            for (let i = 0; i < points.length; i++) {
                points[i].update(mouse);
                points[i].show(ctx);
            }
            requestAnimationFrame(draw);
        }

        setInterval(function () {
            if (config.logFramerate) eFramerate.textContent = `${framerate}fps`;
            framerate = 0;
        }, 1000);

        draw();

        function startMove(position) {
            mouse.x = position.x;
            mouse.y = position.y;
            for (let i = 0; i < points.length; i++)
                if (points[i].hover(position)) {
                    points[i].selected = true;
                    break;
                }
        }

        function stopMove() {
            for (let i = 0; i < points.length; i++) points[i].selected = false;
        }

        startClick(eCanvas, startMove);
        stopClick(eCanvas, stopMove);
    </script>
</Layout>
