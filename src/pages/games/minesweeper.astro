---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Minesweeper">
    <!-- SECTION: STATIC_IMPORTS -->
    <script is:inline src="/js/utils/core.js"></script>
    <!-- ENDSECTION: STATIC_IMPORTS -->

    <main class="relative w-full h-full overflow-auto"></main>

    <script is:inline>
        class MinesweeperCellElement extends HTMLDivElement {
            constructor() {
                super();
                this.revealed = false;
                this.adjacentMineCount = 0;
                this.mine = false;
                this.flagged = null;

                this.baseClassName =
                    "w-10 h-10 flex items-center justify-center border-2 border-gray-600 select-none";
                this.className = `${this.baseClassName} bg-gray-300 hover:bg-gray-400 hover:cursor-pointer`;
            }

            getFlagged() {
                return this.flagged;
            }

            setFlagged() {
                if (this.revealed) return;

                if (this.flagged == null) {
                    this.flagged = "mine";
                } else if (this.flagged == "mine") {
                    this.flagged = "?";
                } else if (this.flagged == "?") {
                    this.flagged = null;
                }

                if (this.flagged) {
                    this.className = `${this.baseClassName} bg-orange-500 text-white hover:bg-orange-700 hover:cursor-pointer`;
                    this.textContent = this.flagged == "?" ? "?" : "";
                } else {
                    this.className = `${this.baseClassName} bg-gray-300 hover:bg-gray-300 hover:cursor-pointer`;
                    this.textContent = "";
                }
            }

            getRevealed() {
                return this.revealed;
            }

            setRevealed() {
                this.revealed = true;
                this.flagged = null;
                this._setContent();
                if (this.mine)
                    this.className = `${this.baseClassName} bg-red-500`;
                else this.className = this.baseClassName;
            }

            getMine() {
                return this.mine;
            }

            setMine() {
                this.mine = true;
                this._setContent();
            }

            getAdjacentMineCount() {
                return this.adjacentMineCount;
            }

            setAdjacentMineCount(adjacentMineCount) {
                this.adjacentMineCount = adjacentMineCount;
                this._setContent();
            }

            _setContent() {
                if (this.revealed) {
                    if (!this.mine) {
                        if (this.adjacentMineCount == 0) this.textContent = "";
                        else this.textContent = this.adjacentMineCount;
                    } else {
                        this.textContent = "X";
                    }
                }
            }
        }

        class MinesweeperRowElement extends HTMLDivElement {
            constructor() {
                super();
                this.cells = [];
                this.className = "flex flex-row gap-1";
            }

            push(cell) {
                this.appendChild(cell);
                this.cells.push(cell);
            }
        }

        class MinesweeperResetButtonElement extends HTMLDivElement {
            constructor(onreset, difficulty) {
                super();
                this.difficulty = difficulty;
                this.className = "flex border-2 divide-x bg-white";
                const button = document.createElement("button");
                button.className =
                    "hover:bg-gray-200 text-gray-800 font-bold px-2 inline-flex items-center";
                button.textContent = "RESET GAME";
                this.appendChild(button);

                const difficultySelect = document.createElement("select");
                difficultySelect.className = "pl-2";
                difficultySelect.innerHTML = [
                    "beginner",
                    "intermediate",
                    "expert",
                ].map(
                    (d) =>
                        `<option ${
                            d == this.difficulty ? "selected" : ""
                        } value="${d}">${d}</option>`
                );
                difficultySelect.onchange = (e) => {
                    this.difficulty = e.target.value;
                };

                this.appendChild(difficultySelect);

                button.onclick = () => onreset(this.difficulty);
            }
        }

        class MinesweeperControlsElement extends HTMLDivElement {
            constructor(minesAmount, difficulty, onreset) {
                super();
                this.difficulty = difficulty;
                this.flags = null;
                this.minesAmount = minesAmount;
                this.mines = null;
                this.onreset = onreset;
            }

            connectedCallback() {
                this.className = "relative w-full flex justify-around gap-20";

                const leftDiv = document.createElement("div");
                leftDiv.className = "flex gap-2";

                const flagsDiv = document.createElement("div");
                flagsDiv.className = "flex gap-2";
                const flagsLabel = document.createElement("span");
                flagsLabel.className = "font-bold";
                flagsDiv.appendChild(flagsLabel);
                flagsLabel.textContent = "Amount Of Flags";
                this.flags = document.createElement("span");
                flagsDiv.appendChild(this.flags);
                leftDiv.appendChild(flagsDiv);
                this.setFlags(0);

                const seperator = document.createElement("div");
                leftDiv.appendChild(seperator);
                seperator.className = "border-l-2 border-black";

                const minesDiv = document.createElement("div");
                minesDiv.className = "flex gap-2";
                const minesLabel = document.createElement("span");
                minesLabel.className = "font-bold";
                minesDiv.appendChild(minesLabel);
                minesLabel.textContent = "Amount Of Mines";
                this.mines = document.createElement("span");
                minesDiv.appendChild(this.mines);
                leftDiv.appendChild(minesDiv);
                this.setMines(this.minesAmount);

                this.appendChild(leftDiv);

                const rightButton = new MinesweeperResetButtonElement(
                    this.onreset,
                    this.difficulty
                );
                this.appendChild(rightButton);
            }

            setFlags(flagsAmount) {
                if (this.flags) {
                    this.flags.textContent = flagsAmount;
                }
            }

            setMines(minesAmount) {
                if (this.mines) {
                    this.mines.textContent = minesAmount;
                }
            }
        }

        class MinesweeperElement extends HTMLDivElement {
            static difficulties = {
                beginner: { cols: 9, rows: 9, mines: 10 },
                intermediate: { cols: 16, rows: 16, mines: 40 },
                expert: { cols: 30, rows: 16, mines: 99 },
            };
            static observedAttributes = ["cols", "rows", "mines"];

            constructor(difficulty = "beginner") {
                super();
                this.difficulty = difficulty;
                this.rowAmount =
                    MinesweeperElement.difficulties[difficulty].rows;
                this.columnAmount =
                    MinesweeperElement.difficulties[difficulty].cols;
                this.mineAmount =
                    MinesweeperElement.difficulties[difficulty].mines;
                this.rows = [];

                this.flaggedMineCount = 0;
                this.flaggedCount = 0;
                this.touched = false;
                this.controls = null;

                this.className =
                    "flex flex-col gap-1 items-center p-10 mx-auto h-fit w-fit";
                this.initialGameState();
            }

            revealCell(i, j) {
                const cell = this.rows[i].cells[j];

                if (!cell.getRevealed()) {
                    if (cell.getFlagged() == "mine") {
                        this.flaggedCount--;
                        this.controls.setFlags(this.flaggedCount);
                    }
                    cell.setRevealed();
                }

                if (!this.touched) {
                    if (cell.getMine() || cell.getAdjacentMineCount() > 0) {
                        this.initialGameState(this.difficulty);
                        this.revealCell(i, j);
                        return;
                    }
                }

                this.touched = true;

                if (cell.getMine()) {
                    this.lostGameState();
                    for (let x = 0; x < this.rows.length; x++) {
                        for (let y = 0; y < this.rows[x].cells.length; y++) {
                            this.rows[x].cells[y].setRevealed();
                        }
                    }
                    return;
                }

                if (cell.getAdjacentMineCount() != 0) return;

                for (let g = -1; g <= 1; g++) {
                    for (let k = -1; k <= 1; k++) {
                        const rowIndex = i + g;
                        const colIndex = j + k;

                        const validRowIndex =
                            rowIndex >= 0 && rowIndex < this.rowAmount;
                        if (!validRowIndex) continue;

                        const validColIndex =
                            colIndex >= 0 && colIndex < this.columnAmount;
                        if (!validColIndex) continue;

                        if (
                            !this.rows[rowIndex].cells[colIndex].getRevealed()
                        ) {
                            this.revealCell(rowIndex, colIndex);
                        }
                    }
                }
            }

            lostGameState() {
                this.failDiv = document.createElement("div");
                const innerDiv = document.createElement("div");
                const text = document.createElement("span");

                text.className = "text-3xl text-white";
                text.textContent = "You Lost";

                this.failDiv.className =
                    "absolute top-0 w-full h-full bg-gray-500 bg-opacity-80 p-2";

                innerDiv.className = "flex flex-col items-center";

                innerDiv.appendChild(text);
                innerDiv.appendChild(
                    new MinesweeperResetButtonElement(
                        (d) => this.initialGameState(d),
                        this.difficulty
                    )
                );

                this.failDiv.appendChild(innerDiv);

                this.parentElement.appendChild(this.failDiv);
            }

            winGameState() {
                this.innerHTML = "";
                const text = document.createElement("span");
                text.className = "text-3xl";
                text.textContent = "You Won";
                this.appendChild(text);
                this.appendChild(
                    new MinesweeperResetButtonElement(
                        (d) => this.initialGameState(d),
                        this.difficulty
                    )
                );
            }

            initialGameState(difficulty = "beginner") {
                if (this.failDiv) this.failDiv.remove();
                this.difficulty = difficulty;
                this.rowAmount =
                    MinesweeperElement.difficulties[difficulty].rows;
                this.columnAmount =
                    MinesweeperElement.difficulties[difficulty].cols;
                this.mineAmount =
                    MinesweeperElement.difficulties[difficulty].mines;
                this.innerHTML = "";
                this.textContent = "";
                this.controls = new MinesweeperControlsElement(
                    this.mineAmount,
                    difficulty,
                    (d) => this.initialGameState(d)
                );
                this.appendChild(this.controls);
                this.flaggedMineCount = 0;
                this.flaggedCount = 0;
                this.controls.setFlags(this.flaggedCount);
                this.touched = false;
                this.rows = [];
                const availableSpots = [];
                for (let i = 0; i < this.rowAmount; i++) {
                    const row = new MinesweeperRowElement();
                    this.appendChild(row);
                    this.rows[i] = row;
                    for (let j = 0; j < this.columnAmount; j++) {
                        const cell = new MinesweeperCellElement();
                        cell.oncontextmenu = () => {
                            if (!cell.getRevealed()) {
                                const priorFlag = cell.getFlagged();
                                cell.setFlagged();
                                if (cell.getFlagged() == "mine")
                                    this.flaggedCount++;
                                else if (priorFlag != "?") this.flaggedCount--;
                                this.controls.setFlags(this.flaggedCount);

                                if (cell.getMine()) {
                                    if (cell.getFlagged() != "?")
                                        if (cell.getFlagged() == "mine")
                                            this.flaggedMineCount++;
                                        else this.flaggedMineCount--;

                                    if (
                                        this.flaggedMineCount ==
                                            this.mineAmount &&
                                        this.flaggedMineCount ==
                                            this.flaggedCount
                                    )
                                        this.winGameState();
                                }
                            }
                            return false;
                        };
                        cell.onclick = () => this.revealCell(i, j);

                        availableSpots.push(cell);
                        this.rows[i].push(cell);
                    }
                }

                for (let i = this.mineAmount; i > 0; i--) {
                    const index = Math.floor(random(availableSpots.length));
                    availableSpots[index].setMine();
                    availableSpots.splice(index, 1);
                }

                for (let i = 0; i < this.rowAmount; i++) {
                    for (let j = 0; j < this.columnAmount; j++) {
                        let adjacentMineCount = 0;
                        for (let g = -1; g <= 1; g++) {
                            for (let k = -1; k <= 1; k++) {
                                const rowIndex = i + g;
                                const colIndex = j + k;

                                const validRowIndex =
                                    rowIndex >= 0 && rowIndex < this.rowAmount;
                                const validColIndex =
                                    colIndex >= 0 &&
                                    colIndex < this.columnAmount;

                                if (validRowIndex && validColIndex) {
                                    const isMine =
                                        this.rows[rowIndex].cells[
                                            colIndex
                                        ].getMine();
                                    if (isMine) adjacentMineCount++;
                                }
                            }
                        }
                        this.rows[i].cells[j].setAdjacentMineCount(
                            adjacentMineCount
                        );
                    }
                }
            }

            print() {
                let pretty = ``;
                for (let i = 0; i < this.rowAmount; i++) {
                    for (let j = 0; j < this.columnAmount; j++) {
                        const cell = this.rows[i].cells[j];
                        pretty += `${
                            cell.getMine() ? "M" : cell.getAdjacentMineCount()
                        } `;
                    }
                    pretty += `\n`;
                }
                console.log(pretty);
            }
        }

        window.customElements.define(
            "minesweeper-cell-element",
            MinesweeperCellElement,
            { extends: "div" }
        );
        window.customElements.define(
            "minesweeper-row-element",
            MinesweeperRowElement,
            { extends: "div" }
        );
        window.customElements.define(
            "minesweeper-controls-element",
            MinesweeperControlsElement,
            { extends: "div" }
        );
        window.customElements.define(
            "minesweeper-reset-button-element",
            MinesweeperResetButtonElement,
            { extends: "div" }
        );
        window.customElements.define(
            "minesweeper-element",
            MinesweeperElement,
            { extends: "div" }
        );

        const game = new MinesweeperElement("beginner");
        document.querySelector("main").appendChild(game);
    </script>
</Layout>
