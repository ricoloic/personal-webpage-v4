---
import Canvas from "../../components/Canvas.astro";
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Minesweeper">
    <!-- SECTION: STATIC_IMPORTS -->
    <script is:inline src="/js/utils/core.js"></script>
    <!-- ENDSECTION: STATIC_IMPORTS -->

    <script is:inline>
    class MinesweeperCellElement extends HTMLDivElement {
        constructor() {
            super();
            this.revealed = false;
            this.adjacentMineCount = 0;
            this.mine = false;
            this.flagged = false;

            this.baseClassName =
                "w-10 h-10 flex items-center justify-center border-2 border-gray-600 select-none";
            this.className = `${this.baseClassName} bg-gray-300 hover:bg-gray-400 hover:cursor-pointer`;
        }

        getFlagged() {
            return this.flagged;
        }

        setFlagged() {
            if (this.revealed) return;

            this.flagged = !this.flagged;

            if (this.flagged) {
                this.className = `${this.baseClassName} bg-orange-500`;
            } else {
                this.className = `${this.baseClassName} hover:bg-gray-300 hover:cursor-pointer`;
            }
        }

        getRevealed() {
            return this.revealed;
        }

        setRevealed() {
            this.revealed = true;
            this.flagged = false;
            this._setContent();
            if (this.mine)
                this.className = `${this.baseClassName} bg-red-500`;
            else this.className = this.baseClassName;
        }

        getMine() {
            return this.mine;
        }

        setMine() {
            this.mine = true;
            this._setContent();
        }

        getAdjacentMineCount() {
            return this.adjacentMineCount;
        }

        setAdjacentMineCount(adjacentMineCount) {
            this.adjacentMineCount = adjacentMineCount;
            this._setContent();
        }

        _setContent() {
            if (this.revealed && !this.mine)
                if (this.adjacentMineCount == 0) this.textContent = "";
                else this.textContent = this.adjacentMineCount;
        }
    }

    class MinesweeperRowElement extends HTMLDivElement {
        constructor() {
            super();
            this.cells = [];
            this.className = "flex flex-row gap-2";
        }

        push(cell) {
            this.appendChild(cell);
            this.cells.push(cell);
        }
    }

    class MinesweeperResetButtonElement extends HTMLButtonElement {
        constructor(onreset) {
            super();
            this.onclick = onreset;
            this.className =
                "bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold px-2 inline-flex items-center";
            this.textContent = "RESET GAME";
        }
    }

    class MinesweeperControlsElement extends HTMLDivElement {
        constructor(minesAmount, onreset) {
            super();
            this.flags = null;
            this.minesAmount = minesAmount;
            this.mines = null;
            this.onreset = onreset;
        }

        connectedCallback() {
            this.className = "w-full flex justify-between";

            const leftDiv = document.createElement("div");
            leftDiv.className = "flex gap-2";

            const flagsDiv = document.createElement("div");
            flagsDiv.className = "flex gap-2";
            const flagsLabel = document.createElement("span");
            flagsLabel.className = "font-bold";
            flagsDiv.appendChild(flagsLabel);
            flagsLabel.textContent = "Amount Of Flags";
            this.flags = document.createElement("span");
            flagsDiv.appendChild(this.flags);
            leftDiv.appendChild(flagsDiv);
            this.setFlags(0);

            const seperator = document.createElement("div");
            leftDiv.appendChild(seperator);
            seperator.className = "border-l-2 border-black";

            const minesDiv = document.createElement("div");
            minesDiv.className = "flex gap-2";
            const minesLabel = document.createElement("span");
            minesLabel.className = "font-bold";
            minesDiv.appendChild(minesLabel);
            minesLabel.textContent = "Amount Of Mines";
            this.mines = document.createElement("span");
            minesDiv.appendChild(this.mines);
            leftDiv.appendChild(minesDiv);
            this.setMines(this.minesAmount);

            this.appendChild(leftDiv);

            const rightButton = new MinesweeperResetButtonElement(
                this.onreset
            );
            this.appendChild(rightButton);
        }

        setFlags(flagsAmount) {
            if (this.flags) {
                this.flags.textContent = flagsAmount;
            }
        }

        setMines(minesAmount) {
            if (this.mines) {
                this.mines.textContent = minesAmount;
            }
        }
    }

    class MinesweeperElement extends HTMLElement {
        static observedAttributes = ["cols", "rows", "mines"];

        constructor() {
            super();
            this.columnAmount = 0;
            this.rowAmount = 0;
            this.mineAmount = 0;
            this.rows = [];

            this.flaggedMineCount = 0;
            this.flaggedCount = 0;
            this.touched = false;
            this.controls = null;
        }

        connectedCallback() {
            if (this.hasAttribute("cols"))
                this.columnAmount = parseInt(this.getAttribute("cols"), 10);
            else this.columnAmount = 10;

            if (this.hasAttribute("rows"))
                this.rowAmount = parseInt(this.getAttribute("rows"), 10);
            else this.rowAmount = 10;

            if (this.hasAttribute("mines"))
                this.mineAmount = parseInt(this.getAttribute("mines"), 10);
            else this.mineAmount = 2;

            this.className = "flex flex-col gap-2 items-center";
            this.initialGameState();
        }

        attributeChangedCallback(name, oldValue, newValue) {
            let actualName = null;

            switch (name) {
                case "mines":
                    actualName = "mineAmount";
                    break;
                case "cols":
                    actualName = "columnAmount";
                    break;
                case "rows":
                    actualName = "rowAmount";
                    break;
            }

            if (actualName) {
                this[actualName] = parseInt(newValue, 10);
            }
            this.initialGameState();
        }

        revealCell(i, j) {
            const cell = this.rows[i].cells[j];

            if (!cell.getRevealed()) {
                if (cell.getFlagged()) {
                    this.flaggedCount--;
                    this.controls.setFlags(this.flaggedCount);
                }
                cell.setRevealed();
            }

            if (!this.touched) {
                if (cell.getMine() || cell.getAdjacentMineCount() > 0) {
                    this.initialGameState();
                    this.revealCell(i, j);
                    return;
                }
            }

            this.touched = true;

            if (cell.getMine()) {
                this.lostGameState();
                return;
            }

            if (cell.getAdjacentMineCount() != 0) return;

            for (let g = -1; g <= 1; g++) {
                for (let k = -1; k <= 1; k++) {
                    const rowIndex = i + g;
                    const colIndex = j + k;

                    const validRowIndex =
                        rowIndex >= 0 && rowIndex < this.rowAmount;
                    if (!validRowIndex) continue;

                    const validColIndex =
                        colIndex >= 0 && colIndex < this.columnAmount;
                    if (!validColIndex) continue;

                    if (
                        !this.rows[rowIndex].cells[colIndex].getRevealed()
                    ) {
                        this.revealCell(rowIndex, colIndex);
                    }
                }
            }
        }

        lostGameState() {
            this.innerHTML = "";
            const text = document.createElement("span");
            text.className = "text-3xl";
            text.textContent = "You Lost";
            this.appendChild(text);
            this.appendChild(
                new MinesweeperResetButtonElement(() =>
                    this.initialGameState()
                )
            );
        }

        winGameState() {
            this.innerHTML = "";
            const text = document.createElement("span");
            text.className = "text-3xl";
            text.textContent = "You Won";
            this.appendChild(text);
            this.appendChild(
                new MinesweeperResetButtonElement(() =>
                    this.initialGameState()
                )
            );
        }

        initialGameState() {
            this.innerHTML = "";
            this.textContent = "";
            this.controls = new MinesweeperControlsElement(
                this.mineAmount,
                () => this.initialGameState()
            );
            this.appendChild(this.controls);
            this.flaggedMineCount = 0;
            this.flaggedCount = 0;
            this.controls.setFlags(this.flaggedCount);
            this.touched = false;
            this.rows = [];
            const availableSpots = [];
            for (let i = 0; i < this.rowAmount; i++) {
                const row = new MinesweeperRowElement();
                this.appendChild(row);
                this.rows[i] = row;
                for (let j = 0; j < this.columnAmount; j++) {
                    const cell = new MinesweeperCellElement();
                    cell.oncontextmenu = () => {
                        if (!cell.getRevealed()) {
                            cell.setFlagged();
                            if (cell.getFlagged()) this.flaggedCount++;
                            else this.flaggedCount--;
                            this.controls.setFlags(this.flaggedCount);

                            if (cell.getMine()) {
                                if (cell.getFlagged())
                                    this.flaggedMineCount++;
                                else this.flaggedMineCount--;

                                if (
                                    this.flaggedMineCount ==
                                    this.mineAmount &&
                                    this.flaggedMineCount ==
                                    this.flaggedCount
                                )
                                    this.winGameState();
                            }
                        }
                        return false;
                    };
                    cell.onclick = () => this.revealCell(i, j);

                    availableSpots.push(cell);
                    this.rows[i].push(cell);
                }
            }

            for (let i = this.mineAmount; i > 0; i--) {
                const index = Math.floor(random(availableSpots.length));
                availableSpots[index].setMine();
                availableSpots.splice(index, 1);
            }

            for (let i = 0; i < this.rowAmount; i++) {
                for (let j = 0; j < this.columnAmount; j++) {
                    let adjacentMineCount = 0;
                    for (let g = -1; g <= 1; g++) {
                        for (let k = -1; k <= 1; k++) {
                            const rowIndex = i + g;
                            const colIndex = j + k;

                            const validRowIndex =
                                rowIndex >= 0 && rowIndex < this.rowAmount;
                            const validColIndex =
                                colIndex >= 0 &&
                                colIndex < this.columnAmount;

                            if (validRowIndex && validColIndex) {
                                const isMine =
                                    this.rows[rowIndex].cells[
                                        colIndex
                                    ].getMine();
                                if (isMine) adjacentMineCount++;
                            }
                        }
                    }
                    this.rows[i].cells[j].setAdjacentMineCount(
                        adjacentMineCount
                    );
                }
            }
        }

        print() {
            let pretty = ``;
            for (let i = 0; i < this.rowAmount; i++) {
                for (let j = 0; j < this.columnAmount; j++) {
                    const cell = this.rows[i].cells[j];
                    pretty += `${cell.getMine() ? "M" : cell.getAdjacentMineCount()
                        } `;
                }
                pretty += `\n`;
            }
            console.log(pretty);
        }
    }

    window.customElements.define(
        "minesweeper-cell-element",
        MinesweeperCellElement,
        { extends: "div" }
    );
    window.customElements.define(
        "minesweeper-row-element",
        MinesweeperRowElement,
        { extends: "div" }
    );
    window.customElements.define(
        "minesweeper-controls-element",
        MinesweeperControlsElement,
        { extends: "div" }
    );
    window.customElements.define(
        "minesweeper-reset-button-element",
        MinesweeperResetButtonElement,
        { extends: "button" }
    );
    window.customElements.define("minesweeper-element", MinesweeperElement);
    </script>

    <main
        class="overflow-y-auto relative flex-1 overflow-hidden h-full flex justify-center items-center">
        <minesweeper-element cols="30" rows="10" mines="20"
        ></minesweeper-element>
    </main>

    <script is:inline>
    const config = {};
    </script>
</Layout>
