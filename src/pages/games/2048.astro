---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="2048">
    <!-- SECTION: STATIC_IMPORTS -->
    <script is:inline src="/js/utils/core.js"></script>
    <!-- ENDSECTION: STATIC_IMPORTS -->

    <main class="relative w-full h-full overflow-auto p-6"></main>

    <script is:inline>
        const DIRECTIONS = {
            up: 38,
            right: 39,
            down: 40,
            left: 37,
        };

        class CellElement extends HTMLDivElement {
            constructor(i, j) {
                super();
                this.i = i;
                this.j = j;
                this.className =
                    "flex justify-center items-center w-20 h-20 border-2 text-2xl";
                this.value = 0;
                this.id = `${i}-${j}-cell`;
                this.setAttribute("id", this.id);
                this._onValueChange();
            }

            isZero() {
                return this.value == 0;
            }

            add(value) {
                this.value += value;
                this._onValueChange();
            }

            setZero() {
                this.value = 0;
                this._onValueChange();
            }

            _onValueChange() {
                this.textContent = this.value ? this.value : "";
            }
        }
        window.customElements.define("cell-element", CellElement, {
            extends: "div",
        });

        class RowElement extends HTMLDivElement {
            constructor() {
                super();
                this.className = "flex flex-row";
                this.cols = [];
            }

            addCell(cell) {
                this.cols.push(cell);
                this.appendChild(cell);
            }
        }
        window.customElements.define("row-element", RowElement, {
            extends: "div",
        });

        class GridElement extends HTMLDivElement {
            constructor() {
                super();
                this.className = "flex flex-col";
                this.rows = [];
                this.onmerge = () => null;
                this.onlost = () => null;

                for (let i = 0; i < 4; i++) {
                    this.rows[i] = new RowElement();
                    this.appendChild(this.rows[i]);
                    for (let j = 0; j < 4; j++) {
                        this.rows[i].addCell(new CellElement(i, j));
                    }
                }

                this._addPossibleValueToRandomZeroCell();
                this._addPossibleValueToRandomZeroCell();
            }

            _addPossibleValueToRandomZeroCell() {
                const zeroCells = this._getZeroCells();
                if (zeroCells.length > 0) random(zeroCells).add(random([2, 4]));
            }

            _getZeroCells() {
                const zeroCells = [];
                for (let i = 0; i < this.rows.length; i++)
                    for (let j = 0; j < this.rows[i].cols.length; j++) {
                        const cell = this._getCell(i, j);
                        if (cell.isZero()) zeroCells.push(cell);
                    }
                return zeroCells;
            }

            _areCellsSameValuesOrOneOfCellZero(cell1, cell2) {
                return (
                    (cell1.value == cell2.value ||
                        cell1.isZero() ||
                        cell2.isZero()) &&
                    !(cell1.isZero() && cell2.isZero())
                );
            }

            _isDifferentCurrentRows(otherRows) {
                for (let i = 0; i < this.rows.length; i++)
                    for (let j = 0; j < this.rows[i].cols.length; j++)
                        if (otherRows[i][j] != this.rows[i].cols[j].value)
                            return true;
                return false;
            }

            _getCell(i, j) {
                return this.rows[i].cols[j];
            }

            _removeZerosForRows(colIndex, start, end) {
                const isStartSmaller = start < end;
                let i = start;
                loop_rows: while (isStartSmaller ? i < end : i > end) {
                    const cell = this._getCell(i, colIndex);

                    if (cell.isZero()) {
                        this._removeZerosForRows(
                            colIndex,
                            isStartSmaller ? i + 1 : i - 1,
                            end
                        );
                        const nextCell = this._getCell(
                            isStartSmaller ? i + 1 : i - 1,
                            colIndex
                        );
                        cell.add(nextCell.value);
                        nextCell.setZero();
                    }

                    if (isStartSmaller) i++;
                    else i--;
                }
            }

            _removeZerosForCols(rowIndex, start, end) {
                const isStartSmaller = start < end;
                let j = start;
                loop_cols: while (isStartSmaller ? j < end : j > end) {
                    const cell = this._getCell(rowIndex, j);

                    if (cell.isZero()) {
                        this._removeZerosForCols(
                            rowIndex,
                            isStartSmaller ? j + 1 : j - 1,
                            end
                        );
                        const nextCell = this._getCell(
                            rowIndex,
                            isStartSmaller ? j + 1 : j - 1
                        );
                        cell.add(nextCell.value);
                        nextCell.setZero();
                    }

                    if (isStartSmaller) j++;
                    else j--;
                }
            }

            _isBlocked() {
                if (this._getZeroCells().length > 0) return false;

                for (let i = 0; i < this.rows.length; i++) {
                    for (let j = 0; j < this.rows[i].cols.length; j++) {
                        const current = this._getCell(i, j);

                        const left =
                            i - 1 >= 0 ? this._getCell(i - 1, j) : null;
                        if (left?.value === current.value) return false;

                        const right =
                            i + 1 <= 3 ? this._getCell(i + 1, j) : null;
                        if (right?.value === current.value) return false;

                        const top = j - 1 >= 0 ? this._getCell(i, j - 1) : null;
                        if (top?.value === current.value) return false;

                        const bottom =
                            j + 1 <= 3 ? this._getCell(i, j + 1) : null;
                        if (bottom?.value === current.value) return false;
                    }
                }

                return true;
            }

            move(direction) {
                const prevRows = this.rows.map((r) =>
                    r.cols.map((c) => c.value)
                );

                if (direction == DIRECTIONS.up) {
                    loop_cols: for (let j = 0; j < 4; j++) {
                        this._removeZerosForRows(j, 0, 3);

                        loop_rows: for (let i = 0; i < 3; i++) {
                            const cell = this._getCell(i, j);
                            if (cell.isZero()) continue loop_rows;

                            const nextCell = this._getCell(i + 1, j);
                            if (cell.value == nextCell.value) {
                                cell.add(nextCell.value);
                                nextCell.setZero();
                                this.onmerge(cell);
                                continue loop_rows;
                            }
                        }

                        this._removeZerosForRows(j, 0, 3);
                    }
                } else if (direction == DIRECTIONS.down) {
                    loop_cols: for (let j = 0; j < 4; j++) {
                        this._removeZerosForRows(j, 3, 0);

                        loop_rows: for (let i = 3; i > 0; i--) {
                            const cell = this._getCell(i, j);
                            if (cell.isZero()) continue loop_rows;

                            const nextCell = this._getCell(i - 1, j);
                            if (cell.value == nextCell.value) {
                                cell.add(nextCell.value);
                                nextCell.setZero();
                                this.onmerge(cell);
                                continue loop_rows;
                            }
                        }

                        this._removeZerosForRows(j, 3, 0);
                    }
                } else if (direction == DIRECTIONS.right) {
                    loop_rows: for (let i = 0; i < 4; i++) {
                        this._removeZerosForCols(i, 3, 0);

                        loop_cols: for (let j = 3; j > 0; j--) {
                            const cell = this._getCell(i, j);
                            if (cell.isZero()) continue loop_cols;

                            const nextCell = this._getCell(i, j - 1);
                            if (cell.value == nextCell.value) {
                                cell.add(nextCell.value);
                                nextCell.setZero();
                                this.onmerge(cell);
                                continue loop_cols;
                            }
                        }

                        this._removeZerosForCols(i, 3, 0);
                    }
                } else if (direction == DIRECTIONS.left) {
                    loop_rows: for (let i = 0; i < 4; i++) {
                        this._removeZerosForCols(i, 0, 3);

                        loop_cols: for (let j = 0; j < 3; j++) {
                            const cell = this._getCell(i, j);
                            if (cell.isZero()) continue loop_cols;

                            const nextCell = this._getCell(i, j + 1);
                            if (cell.value == nextCell.value) {
                                cell.add(nextCell.value);
                                nextCell.setZero();
                                this.onmerge(cell);
                                continue loop_cols;
                            }
                        }

                        this._removeZerosForCols(i, 0, 3);
                    }
                }

                if (this._isDifferentCurrentRows(prevRows)) {
                    this._addPossibleValueToRandomZeroCell();
                }

                if (this._isBlocked()) {
                    console.log("You Lost");
                }
            }
        }
        window.customElements.define("grid-element", GridElement, {
            extends: "div",
        });

        class GameElement extends HTMLDivElement {
            constructor() {
                super();
                this.className =
                    "flex flex-col items-center gap-4 w-fit m-auto";
                this.score = 0;
                this.grid = new GridElement();
                const title = document.createElement("p");
                const topContainer = document.createElement("div");
                topContainer.className = "flex justify-between w-full";
                title.className = "block text-5xl";
                title.textContent = "2048";
                this.scoreElement = document.createElement("p");
                this.scoreElement.className = "text-md";
                this.scoreElement.textContent = this.score;
                const scoreTitle = document.createElement("p");
                scoreTitle.className = "text-lg";
                scoreTitle.textContent = "SCORE";
                const scoreContainer = document.createElement("p");
                scoreContainer.className =
                    "rounded px-2 py-1 bg-amber-500 shadow-xl text-white flex flex-col items-center justify-evenly";
                scoreContainer.appendChild(scoreTitle);
                scoreContainer.appendChild(this.scoreElement);
                topContainer.appendChild(title);
                topContainer.appendChild(scoreContainer);

                window.onkeydown = (event) => {
                    if (Object.values(DIRECTIONS).includes(event.keyCode))
                        this.grid.move(event.keyCode);
                };

                this.grid.onmerge = (cell) => {
                    this.score += cell.value;
                    this.scoreElement.textContent = this.score;
                    console.log(this.score);
                };

                this.appendChild(topContainer);
                this.appendChild(this.grid);
            }
        }
        window.customElements.define("game-element", GameElement, {
            extends: "div",
        });

        $("main").appendChild(new GameElement());
    </script>
</Layout>
